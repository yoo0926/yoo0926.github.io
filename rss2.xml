<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>하루하루 끄적끄적</title>
    <link>https://yoo0926.github.io/</link>
    
    <atom:link href="https://yoo0926.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>티끌모아 태산이라 티끌부터 모아본다.</description>
    <pubDate>Sun, 14 May 2023 09:06:12 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>4. 유스케이스 구현하기</title>
      <link>https://yoo0926.github.io/2023/03/05/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-4/</link>
      <guid>https://yoo0926.github.io/2023/03/05/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-4/</guid>
      <pubDate>Sun, 05 Mar 2023 08:14:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;앞서 설계한 패키지대로 코드를 작성하면 애플리케이션, 웹, 영속성 계층이 아주 느슨하게 결합돼 있기 때문에 필요한 대로 도메인 코드를 자유롭게 모델링할 수 있다.&lt;/p&gt;
&lt;p&gt;육각형 아키텍처는 도메인 중심의 아키텍처에 적합하기 때문에 도메인 엔티</description>
        
      
      
      
      <content:encoded><![CDATA[<p>앞서 설계한 패키지대로 코드를 작성하면 애플리케이션, 웹, 영속성 계층이 아주 느슨하게 결합돼 있기 때문에 필요한 대로 도메인 코드를 자유롭게 모델링할 수 있다.</p><p>육각형 아키텍처는 도메인 중심의 아키텍처에 적합하기 때문에 도메인 엔티티를 만드는 것으로 시작한 후 해당 도메인 엔티티를 중심으로 유스케이스를 구현한다.</p><h3 id="유스케이스-둘러보기"><a href="#유스케이스-둘러보기" class="headerlink" title="유스케이스 둘러보기"></a>유스케이스 둘러보기</h3><p>유스케이스는 일반적으로 아래와 같은 단계를 따른다.</p><ol><li>입력을 받는다</li><li>비즈니스 규칙을 검증한다</li><li>모델 상태를 조작한다</li><li>출력을 반환한다.</li></ol><p>유스케이스는 인커밍 어댑터로부터 입력을 받는데 유스케이스 코드는 도메인 로직에만 집중하고 ‘입력 유효성 검증’은 다른 곳에서 처리하는게 좋다.</p><p>그러나 유스케이스는 비즈니스 규칙을 검증할 책임이 있고 도메인 엔티티와 이 책임을 공유한다.</p><h3 id="입력-유효성-검증"><a href="#입력-유효성-검증" class="headerlink" title="입력 유효성 검증"></a>입력 유효성 검증</h3><p>입력 유효성 검증이 유스케이스의 책임이 아니라도 애플리케이션 계층의 책임은 맞다. 유효성 검증을 하지 않으면 애플리케이션 코어의 바깥쪽으로부터 유효하지 않은 입력값을 받게 되고, 모델의 상태를 해칠 수 있다.</p><p><code>입력 모델(input model)</code>에서 이러한 검증을 담당해보자.</p><p>유스케이스에서 입력에 사용할 모델 클래스의 생성자 내에서 특정 조건에 위배될 경우 객체 생성 자체를 막고 예외를 던지면 될 것이다.</p><p>또한 필드에 final을 붙여서 불변 필드로 만들어 생성에 성공하면 유효한 상태를 유지하고 잘못된 상태로 변경할 수 없다는 사실을 보장할 수 있다.</p><p>사실 이런 기능들은 Bean Validation API를 사용하면 편하게 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMoneyCommand</span> <span class="keyword">extends</span> <span class="title">SelfValidating</span>&lt;<span class="title">SendMoneyCommand</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SendMoneyCommand</span><span class="params">(Money money)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">requiredGreaterThan(money, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">this</span>.validateSelf();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelfValidating 추상 클래스는 validateSelf() 메서드를 제공하여 호출하면 필드에 지정된 Bean Validation 어노테이션(@NotNull 같은)을 검증하고 유효성 검증 규칙을 위반한 경우 예외를 던진다.</p><h3 id="생성자의-힘"><a href="#생성자의-힘" class="headerlink" title="생성자의 힘"></a>생성자의 힘</h3><p>필드가 많아질 경우 빌더패턴을 도입해서 생성자를 private으로 만들고 빌더의 build() 메서드 내부에 생성자 호출을 숨길 수 있다.</p><p>다만, 만약 빌더와 생성자에 새로운 필드를 추가하고 빌더를 호출하는 코드에 새로운 필드를 추가하는 걸 깜빡하더라도 컴파일러는 이러한 시도에 대해서 경고해주지 못할 수 있다.</p><p>빌더 뒤에 숨기지 말고 생성자를 직접 사용했다면 컴파일 에러에 따라 나머지 코드에 변경사항을 반영할 수 있을 것이다.</p><ul><li>난 저자랑 생각이 다름  저자가 예시에서 파라미터가 20개인 생성자를 호출하는 대신 빌더를 사용하면 이러이러 하다 라고 말했는데 코드의 가독성 측면에서 빌더패턴이 훨씬 보기 좋다고 생각한다.  빌더 호출 코드에 깜빡할 경우가 얼마나 될것이며 단위테스트 과정에서 어느정도 걸러낼 수 있다고 생각된다.  오히려 생성자의 파라미터 20개가 모두 String 타입일 경우 지저분한 코드를 보는게 더 스트레스 받을거 같다.</li></ul><h3 id="유스케이스마다-다른-입력-모델"><a href="#유스케이스마다-다른-입력-모델" class="headerlink" title="유스케이스마다 다른 입력 모델"></a>유스케이스마다 다른 입력 모델</h3><p>각기 다른 유스케이스에 동일한 모델을 사용하고 싶은 경우가 있다.</p><p><code>계좌 등록하기</code>와 <code>계좌 업데이트 하기</code>라는 두개의 기능을 구현할 때 계좌에 대한 등록시점에선 소유권을 체크하기 위해 계좌의 소유자 ID 필드가 무조건 필요하지만 업데이트는 계좌번호만 체크한다고 했을때 ID 필드는 null을 허용하도록 만들수 있다.</p><p>일단 불변 도메인 모델에 null을 허용하는 것부터 일단 코드 스멜이 난다고 볼수 있다.(잠재적으로 side-Effect가 발생할수도 있는 코드를 말한다.)</p><p>단일책임원칙을 고려했을 때 각 유스케이스의 전용 입력모델을 사용하는게 결합도도 낮추고 부수효과도 줄일 수 있는 방법이다. 다만, 모든 입력 데이터에 대해서 각 유스케이스 별 모델 매핑을 해줘야하는 비용이 있지만 매핑 전략에 대해선 후술 한다.</p><h3 id="비즈니스-규칙-검증하기"><a href="#비즈니스-규칙-검증하기" class="headerlink" title="비즈니스 규칙 검증하기"></a>비즈니스 규칙 검증하기</h3><p>검증은 크게 두가지를 생각해볼 수 있다.</p><ol><li>입력 유효성 검증</li><li>비즈니스 규칙 검증</li></ol><p>둘을 구분하는 가장 실용적인 방법은 <strong>특정 검증이 도메인의 상태에 접근이 필요한지?</strong> **를 생각해보면 된다. 가령 단순히 입력 데이터의 유효성 체크는 도메인의 상태를 체크할 필요 없이 선언적으로 검증이 가능하지만 비즈니스 규칙은 좀 더 맥락을 이해하고 구현할 필요가 있다.</p><p>“출금계좌는 초과출금될 수 없다.” 라는 규칙을 검증할땐 출금계좌의 존재여부 부터 체크하는 등 도메인의 상태에 접근해야 하지만<br>”출금금액은 0보다 커야한다.” 라는 규칙은 도메인의 상태에 접근없이 입력 데이터를 단순히 체크하기만 하면 된다</p><p>비즈니스 규칙 검증은 보통 도메인 엔티티 내부에 직접 구현하는게 가장 좋다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">withDraw</span><span class="params">(Money money, AccountId targetAccountId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!mayWithDraw(money))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 하면 지켜야하는 비즈니스 로직 옆에 있기 때문에 위치를 정하기도, 추론하기도 쉽다.</p><p>만약 엔티티 내부에 위치하기 어렵다면 유스케이스에서 도메인을 사용하기 전에 검증하는 방식도 있을 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequriedArgsConstruct</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMoneyService</span> <span class="keyword">implements</span> <span class="title">SendMoneyUseCase</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMoney</span><span class="params">(SendMoneyCommand command)</span></span>&#123;</span><br><span class="line">requriedSourceAccount(command.getSourceAccountId());</span><br><span class="line">requriedTargetAccount(command.getTargetAccountId());</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>유효성 검증 코드를 실행 후 오류가 발생하면 유효성 전용 예외처리를 통해 사용자</p><h3 id="풍부한-도메인-모델-vs-빈약한-도메인-모델"><a href="#풍부한-도메인-모델-vs-빈약한-도메인-모델" class="headerlink" title="풍부한 도메인 모델 vs 빈약한 도메인 모델"></a>풍부한 도메인 모델 vs 빈약한 도메인 모델</h3><ul><li>풍부한 도메인 모델 : 애플리케이션의 코어에 있는 도메인 엔티티에 최대한 많은 로직이 담겨있다. 도메인의 상태를 변경하는 메서드를 제공하고 비즈니스 규칙 검증에 유효한 값만 허용한다.</li><li>빈약한 도메인 모델 : 도메인 엔티티는 최대한 적은 로직을 가지고 있다. 보통 getter, setter를 제외한 다른로직은 모두 유스케이스에 구현한다.</li></ul><p>결국 복잡한 비즈니스 모델이 어디에 있냐의 차이로 스타일의 차이라고 봐도 무방할 거 같다.</p><h3 id="유스케이스마다-다른-출력모델"><a href="#유스케이스마다-다른-출력모델" class="headerlink" title="유스케이스마다 다른 출력모델"></a>유스케이스마다 다른 출력모델</h3><p>입력에 대한 처리가 끝나면 출력을 해야하는데 이때도 동일하게 각 유스케이스마다 다른 출력모델을 사용하는게 좋다.</p><p>어떤 출력에선 Account 모델 자체를 받고 싶어할 수도 있고, 단순히 성공실패 여부 등 boolean 값만을 받고 싶을 수도 있다.</p><p>정답은 없지만 명확한 규칙이 없다면 최대한 작은 데이터를 반환하는게 좋다. 모델 클래스를 통째로 반환하면 강한 결합이 일어나는데 한 유스케이스의 출력 모델에 새로운 필드가 추가될 경우 동일한 모델을 공유하는 다른 유스케이스에서도 해당 필드를 처리해야 하는 것처럼 영향이 있기 때문에 모델은 구체적이고 작게  결합은 약하게 하는게 좋다.</p><p>같은 이유로 도메인 엔티티 자체를 출력모델로 사용하는 것도 최대한 자제해야한다.</p><h3 id="읽기-전용-유스케이스는-어떨까"><a href="#읽기-전용-유스케이스는-어떨까" class="headerlink" title="읽기 전용 유스케이스는 어떨까?"></a>읽기 전용 유스케이스는 어떨까?</h3><p>상태를 변경할 필요 없이 단순히 DB를 조회해서 값을 반환하기만 하는 읽기 전용 유스케이스를 구현해야 할때 상태변경 유스케이스와 동일한 형식으로 만들게 되면 간단한 기능에 비해 구현해야하는 것들이 많아질 수 있다. 간단히 쿼리만 조회해야 한다면 쿼리 서비스를 만들 수 있다.</p><p>인커밍 전용 포트를 만들어서 쿼리 서비스에서 구현하는 것이다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetAccountQueryService</span> <span class="keyword">implements</span> <span class="title">GetAccountBalanceService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LoadAccountPort loadAccountPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">getAccountBalance</span><span class="params">(AccountId accountId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> loadAccountPort.loadAccount(accountId, LocalDateTime.now())</span><br><span class="line">.calculateBalance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쿼리서비스는 유스케이스 서비스와 동일한 방식으로 동작하는데 GetAccountBalanceQuery 라는 인커밍 포트를 구현하고, 데이터베이스로부터 실제로 데이터를 로드하기 위해 LoadAccountPort라는 아웃고잉 포트를 호출한다.</p><p>이처럼 읽기 전용 쿼리는 쓰기가 가능한 유스케이스(or 커맨드)와 코드 상에서 명확히 구분되는데 이런 방식은 CQS(Command-Query Separation)나 CQRS(Command-Query Responsibility Segregation) 같은 개념과 잘 맞는다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/">만들면서 배우는 클린 아키텍처</category>
      
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2023/03/05/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2. 의존성 역전하기</title>
      <link>https://yoo0926.github.io/2023/03/01/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-2/</link>
      <guid>https://yoo0926.github.io/2023/03/01/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-2/</guid>
      <pubDate>Wed, 01 Mar 2023 07:55:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;계층형 아키텍처의 대안을 이야기 하기전에 SOLID 원칙의 ‘S’와 ‘D’를 담당하는 아래 원칙들을 먼저 살펴보자.&lt;/p&gt;
&lt;h3 id=&quot;단일-책임-원칙-Single-Responsibility-Principle-SRP&quot;&gt;&lt;a href=&quot;#단일-책</description>
        
      
      
      
      <content:encoded><![CDATA[<p>계층형 아키텍처의 대안을 이야기 하기전에 SOLID 원칙의 ‘S’와 ‘D’를 담당하는 아래 원칙들을 먼저 살펴보자.</p><h3 id="단일-책임-원칙-Single-Responsibility-Principle-SRP"><a href="#단일-책임-원칙-Single-Responsibility-Principle-SRP" class="headerlink" title="단일 책임 원칙(Single Responsibility Principle, SRP)"></a>단일 책임 원칙(Single Responsibility Principle, SRP)</h3><ul><li>하나의 컴포넌트는 오로지 한 가지 일만 해야 하고, 그것을 올바르게 수행해야 한다.<ul><li>이 말은 실제 의도와는 조금 다른 오해가 발생할 여지가 있으니 아래 정의가 좀 더 정확하다고 볼 수 있다.</li></ul></li><li>컴포넌트를 변경하는 이유는 오직 하나뿐이어야 한다.</li></ul><p>만약 컴포넌트를 변경할 이유가 한 가지라면 우리가 “어떤 다른 이유로” 소프트웨어를 변경하더라도 이 컴포넌트에 대해선 전혀 신경 쓸 필요가 없다.</p><p>하지만 변경할 이유라는건 컴포넌트 간의 의존성을 통해 너무 쉽게 전파된다.<br>A 컴포넌트는 B,C,D,E에 의존하고 E는 다른 의존성이 없다면<br>A는 다른 B,C,D,E가 바뀔 때 함께 바뀌어야 하지만 E는 E에 기능이 추가,변경될 때만 바뀌게 될 것이다.</p><h3 id="의존성-역전-원칙-Dependency-Inversion-Principle-DIP"><a href="#의존성-역전-원칙-Dependency-Inversion-Principle-DIP" class="headerlink" title="의존성 역전 원칙(Dependency Inversion Principle, DIP)"></a>의존성 역전 원칙(Dependency Inversion Principle, DIP)</h3><p>계층형에서 계층 간 의존성은 항상 다음 계층인 아래 방향을 가리킨다. 단일 책임 원칙을 고수준에서 적용할 경우 상위 계층들이 하위 계층들에 비해 변경할 이유가 더 많다.</p><p>그러므로 영속성 계층에 대한 도메인 계층의 의존성 때문에 영속성 계층을 변경할 때마다 잠재적으로 도메인 계층도 변경해야 한다. 하지만 도메인 코드는 애플리케이션에서 가장 중요한 코드인데 영속성 코드가 바뀐다고 도메인 코드까지 바꾸는게 맞을까? 이 의존성은 어떻게 제거할 수 있을까? 의존성 역전 원칙은 말 그대로의 의미이다.</p><ul><li>코드 상의 어떤 의존성이든 그 방향을 바꿀 수(역전시킬 수) 있다.<ul><li>단, 서드파티 라이브러리처럼 제어할 수 없는 코드에 의존성을 가지고 있다면 역전이 불가능하다.</li></ul></li></ul><p>일반적으로 보기 쉬운 계층형 구조의 서비스가 있다. 도메인 계층의 서비스는 영속성 계층의 엔티티와 리포지토리와 상호작용한다.</p><p>엔티티는 도메인 객체를 표현하고 도메인 코드는 이러한 엔티티의 상태를 변경하는 일을 중심으로 하니까 일단 엔티티를 도메인 계층으로 올려보면 영속성의 리포지토리가 도메인의 엔티티를 의존하는 순환의존성이 생기게 된다.</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2f1fcfa6-7c45-42e5-84a5-ab2e37f264ec/SmartSelect_20230301_164545_Samsung_Notes.jpg" alt="SmartSelect_20230301_164545_Samsung Notes.jpg"></p><p>여기서 DIP를 적용하면 도메인 계층에 리포지토리에 대한 인터페이스를 만들고, 실제 리포지토리는 영속성 계층에서 구현하게 하는 것이다.</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2cbdcd01-5eee-4ffb-b003-8b62a2eb7ba2/SmartSelect_20230301_164632_Samsung_Notes.jpg" alt="SmartSelect_20230301_164632_Samsung Notes.jpg"></p><p>이제 도메인 계층에 인터페이스를 도입함으로써 의존성을 역전시켜서 도메인 로직은 영속성 코드에 의존하지 않고 영속성 계층이 도메인 계층에 의존하게 된다.</p><h3 id="클린-아키텍처"><a href="#클린-아키텍처" class="headerlink" title="클린 아키텍처"></a>클린 아키텍처</h3><p>도메인 코드가 바깥으로 향하는 어떤 의존성도 없어야 함을 의미한다. 대신 의존성 역전 원칙의 도움으로 모든 의존성이 도메인 코드를 향하고 있다.</p><p>클린 아키텍처의 코어에는 주변 유스케이스에서 접근하는 도메인 엔티티들이 있다. 유스케이스는 서비스를 의미하는데 단일 책임을 갖기 위해 좀 더 세분화 시켜서 넓은 서비스 문제를 피한다.</p><p>도메인 코드에선 어떤 영속성 프레임워크나 UI 프레임워크가 사용되는지 알 수 없기 때문에 특정 프레임워크에 특화된 코드를 가질 수 없고 비즈니스 규칙에 집중할 수 있어서 자유롭게 모델링할 수 있다.</p><p>다만, 도메인 계층이 영속성이나 UI 같은 외부 계층과 철저하게 분리돼야 하므로 애플리케이션의 엔티티에 대한 모델을 각 계층에서 유지보수 해야 한다.</p><p>영속성에서 ORM을 사용하는 경우, 도메인 계층과 영속성 계층이 데이터를 주고받을 때, 두 계층에 각각 엔티티 클래스를 만들어서 서로 변환해야 하는데 이는 바람직한 방향이다.</p><p>특정 프레임워크에 특화된 문제로부터 해방시키고자 했던, 결합이 제거된 상태이다.</p><p>클린 아키텍처는 약간 추상적인 느낌이 강해서 이 원칙들을 좀 더 구체적으로 만들어주는 ‘육각형 아키텍처(헥사고날 아키텍처)’에 대해서 살펴보자.</p><h3 id="육각형-아키텍처-헥사고날-아키텍처"><a href="#육각형-아키텍처-헥사고날-아키텍처" class="headerlink" title="육각형 아키텍처(헥사고날 아키텍처)"></a>육각형 아키텍처(헥사고날 아키텍처)</h3><p>애플리케이션 코어가 각 어댑터와 상호작용하기 위해 특정 포트를 제공하기 때문에 ‘포트와 어댑터 아키텍처라고도 불린다. 꼭 육각형의 모양이 중요한건 아니고 팔각형이어도 상관없다.</p><p>육각형 안에는 도메인 엔티티와 이와 상호작용하는 유스케이스가 있다. 외부로 향하는 의존성이 없고 모든 의존성은 코어를 향한다.</p><p>육각형 바깥에는 웹 브라우저와 상호작용하는 웹 어댑터, 데이터베이스와 상호작용하는 영속성 어댑터, 외부 시스템와 상호작용하는 어댑터 등 애플리케이션과 상호작용하는 다양한 어댑터들이 있다.</p><p>코어와 어댑터들 간의 통신이 가능하려면 애플리케이션 코어가 각각의 포트를 제공해야 한다.</p><p>주도하는 어댑터에게는 포트가 코어에 있는 유스케이스 클래스들에  의해 구현되고 호출되는 인터페이스가 될 것이고, 주도되는 어댑터에는 어댑터에 의해 구현되고 코어에 의해 호출되는 인터페이스가 될 것이다.</p><p>이러한 아키텍처의 목적은 결국 도메인 코드가 바깥쪽 코드에 의존하지 않게 함으로써 영속성과 UI에 특화된 모든 문제로부터 도메인 로직의 결합을 제거하고 코드를 변경할 이유의 수를 줄이는 효과가 있다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/">만들면서 배우는 클린 아키텍처</category>
      
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2023/03/01/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>3. 코드 구성하기</title>
      <link>https://yoo0926.github.io/2023/03/01/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-3/</link>
      <guid>https://yoo0926.github.io/2023/03/01/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-3/</guid>
      <pubDate>Wed, 01 Mar 2023 06:12:15 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;코드만 보더라도 어떤 아키텍처인지 알 수 있다면 좋지 않을까? 보통 새로운 프로젝트를 시작할 때 가장 먼저 패키지 구조를 설계하게 된다.&lt;/p&gt;
&lt;h3 id=&quot;계층으로-구성하기&quot;&gt;&lt;a href=&quot;#계층으로-구성하기&quot; class=&quot;headerlin</description>
        
      
      
      
      <content:encoded><![CDATA[<p>코드만 보더라도 어떤 아키텍처인지 알 수 있다면 좋지 않을까? 보통 새로운 프로젝트를 시작할 때 가장 먼저 패키지 구조를 설계하게 된다.</p><h3 id="계층으로-구성하기"><a href="#계층으로-구성하기" class="headerlink" title="계층으로 구성하기"></a>계층으로 구성하기</h3><p>기본적인 계층형으로 프로젝트를 생성한다면 아래와 같은 구조가 될 것이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buckpal</span><br><span class="line">    ├─domain</span><br><span class="line">    │├─Account</span><br><span class="line">    │├─Activity</span><br><span class="line">    │├─AccountRepository</span><br><span class="line">    │└─AccountService</span><br><span class="line">    ├─persistence</span><br><span class="line">    │└─AccountRepositoryImpl</span><br><span class="line">    └─web</span><br><span class="line">    └─AccountController</span><br></pre></td></tr></table></figure><p>도메인, 웹, 영속성 계층별로 패키지를 만들었고 앞서 나왔던 의존성 역전을 사용하여 domain 패키지에 AccountRepository 인터페이스를 두고 persistence 패키지에 구현체를 둬서 의존성이 도메인을 바라보도록 구성되어있다.</p><p>다만 몇가지 단점이 보이는데</p><ol><li>기능이나 특성을 구분짓는 패키지의 경계가 없다.<ul><li>새로운 기능(ex) 사용자관리)을 추가하려면 각 계층 패키지에 UserController, UserService, User 등을 추가하게 되는데 다른 기능과 섞이게 되면 예상치 못한 부수효과가 발생할 수 있다.</li></ul></li><li>애플리케이션이 어떤 유스케이스를 제공하는지 파악하기 어렵다.<ul><li>AccountController와 AccountService가 구체적으로 어떤 기능을 제공하는지 파악하려면 내부 구현 메서드를 살펴봐야 한다.</li></ul></li><li>패키지만 봐서 의도하는 아키텍처를 짐작하기 어렵다.<ul><li>육각형 아키텍처라고 추측하고 웹 어댑터와 영속성 어댑터를 찾기 위해 web, persistence 패키지를 조사해볼 순 있지만 어떤 기능이 웹어댑터에서 호출되는지, 영속성 어댑터가 도메인 계층에 어떤 기능을 제공하는지 한눈에 알 수 없다. 인커밍 포트와 아웃고잉 포트가 코드 속에 숨겨져 있다.</li></ul></li></ol><h3 id="기능으로-구성하기"><a href="#기능으로-구성하기" class="headerlink" title="기능으로 구성하기"></a>기능으로 구성하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buckpal</span><br><span class="line">    └─account</span><br><span class="line">    ├─Account</span><br><span class="line">    ├─AccountController</span><br><span class="line">    ├─AccountRepository</span><br><span class="line">    ├─AccountRepositoryImpl</span><br><span class="line">    └─SendMoneyService</span><br></pre></td></tr></table></figure><p>계좌 관련 기능을 모두 account 라는 패키지에 모았고 AccountService도 책임을 좁히기 위해서 SendMoneyService로 변경하였다.</p><p>이렇게 되면 ‘송금하기’ 유스케이스를 구현한 코드는 클래스명만 봐도 바로 찾을 수 있다.</p><p>하지만 기능을 기준으로 코드를 구성하면 기반 아키텍처가 명확하게 보이지 않아서 가시성이 많이 떨어진다는 큰 단점이 있다.</p><h3 id="아키텍처적으로-표현력-있는-패키지-구조"><a href="#아키텍처적으로-표현력-있는-패키지-구조" class="headerlink" title="아키텍처적으로 표현력 있는 패키지 구조"></a>아키텍처적으로 표현력 있는 패키지 구조</h3><p>육각형 아키텍처에서 구조적으로 핵심적인 요소는 엔티티, 유스케이스, 인커밍/아웃고잉 포트, 인커밍/아웃고잉(혹은 주도하거나 주도되는) 어댑터이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">buckpal</span><br><span class="line">    └─account</span><br><span class="line">        ├─adapter</span><br><span class="line">        │    ├─<span class="keyword">in</span></span><br><span class="line">        │    │  └─web</span><br><span class="line">        │    │     └─AccountController</span><br><span class="line">        │    ├─out</span><br><span class="line">        │    └─persistence</span><br><span class="line">        │        ├─AccountPersistenceAdapter</span><br><span class="line">        │        └─SpringDataAccountRepository</span><br><span class="line">        ├─domain</span><br><span class="line">        │    ├─Account</span><br><span class="line">        │    └─Activity</span><br><span class="line">        └─application</span><br><span class="line">              ├─SendMoneyService</span><br><span class="line">              └─port</span><br><span class="line">                  ├─<span class="keyword">in</span></span><br><span class="line">                  │  └─SendMoneyUseCase</span><br><span class="line">                  └─out</span><br><span class="line">                      ├─LoadAccountPort</span><br><span class="line">                      └─UpdateAccountStatePort</span><br></pre></td></tr></table></figure><p>도메인 모델이 속한 domain 패키지와 도메인 모델을 둘러싼 서비스 계층을 포함하는 application패키지가 있다.</p><p>SendMoneySerivce는 인커밍 포트 인터페이스인 SendMoneyUseCase를 구현 아웃고잉 포트 인터페이스이자 영속성 어댑터에 의해 구현된 LoadAccountPort와 UpdateAccountStatePort를 사용한다.</p><p>adapter 패키지는 애플리케이션 계층의 인커밍 포트를 호출하는 인커밍 어댑터와 애플리케이션 계층의 아웃고잉 포트에 대한 구현을 제공하는 아웃고잉 어댑터를 포함한다.</p><ul><li>책을 읽다가 곰곰히 생각해 봤지만<br>  패키지의 구조가 표현력이 있긴한데 아직 익숙치 않아서 한눈에 들어오진 않는다. 다만, 팀원들과 이러한 아키텍처에 대한 논의가 충분히 되고 합의된 상태에서 구조를 잡는다면 코드와 아키텍처가 직접적으로 매핑되면서 추상적이던 아키텍처가 좀 더 구체적으로 파악이 가능해진거 같기도 하다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/">만들면서 배우는 클린 아키텍처</category>
      
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2023/03/01/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>1. 계층형 아키텍처의 문제는 무엇일까?</title>
      <link>https://yoo0926.github.io/2023/02/25/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-1/</link>
      <guid>https://yoo0926.github.io/2023/02/25/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-1/</guid>
      <pubDate>Sat, 25 Feb 2023 07:55:02 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;계층형-아키텍처란&quot;&gt;&lt;a href=&quot;#계층형-아키텍처란&quot; class=&quot;headerlink&quot; title=&quot;계층형 아키텍처란?&quot;&gt;&lt;/a&gt;계층형 아키텍처란?&lt;/h2&gt;&lt;p&gt;계층(layer)으로 구성된 (웹) 애플리케이션은 전통적인 웹 애플리케이</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="계층형-아키텍처란"><a href="#계층형-아키텍처란" class="headerlink" title="계층형 아키텍처란?"></a>계층형 아키텍처란?</h2><p>계층(layer)으로 구성된 (웹) 애플리케이션은 전통적인 웹 애플리케이션 구조를 말한다.</p><p>크게보면 웹 → 도메인 → 영속성 으로 구성된 3계층으로 많이 표현되는데</p><ul><li>웹 : 요청을 받아서 서비스로 요청을 보냄</li><li>도메인(비즈니스) : 필요한 비즈니스 로직을 수행하고 엔티티의 현재 상태를 조회하거나 변경하기 위해 영속성 계층의 컴포넌트 호출</li><li>영속성 : 엔티티, 리포지터리 등 데이터베이스 관련 컴포넌트</li></ul><p>오랫동안 사용한만큼 견고한 아키텍처 패턴이 맞고 잘 이해하고 사용하면 각 계층에 독립적으로 로직을 작성하고 기존 기능에 영향없는 기능 추가도 가능하다.</p><p>다만, 계층형은 코드에 나쁜 습관들이 스며들기 쉽고 시간이 지날수록 유지보수가 힘들어지는 단점들이 있다.</p><h3 id="계층형-아키텍처는-데이터베이스-주도-설계를-유도한다"><a href="#계층형-아키텍처는-데이터베이스-주도-설계를-유도한다" class="headerlink" title="계층형 아키텍처는 데이터베이스 주도 설계를 유도한다."></a>계층형 아키텍처는 데이터베이스 주도 설계를 유도한다.</h3><p>계층형의 토대는 데이터베이스라서 웹은 도메인을, 도메인은 영속성을 의존하다보니 모두 데이터베이스에  의존하게 된다.</p><p>보통 애플리케이션을 만들때 비즈니스를 관장하는 규칙이나 정책을 반영한 모델을 만드는데 이때 우리는 상태(state)가 아니라 행동(behavior)을 중심으로 모델링한다.</p><p>하지만 계층형의 설계는 보통 데이터베이스를 토대로 도메인 로직을 구현하는 방식이라서 아키텍처의 구현으로는 맞더라도 비즈니스 관점에선 다르다.</p><p>가장 중요한 도메인 로직을 먼저 만들어야 로직을 제대로 이해하는지 확인하고 이를 토대로 웹과 영속성 계층을 설계할 수 있기 때문이다.</p><p>ORM(object-relational-mapping, 객체 관계매핑) 프레임워크(JPA, 하이버네이트 등)를 사용하면 비즈니스 규칙을 영속성 관점에 섞고 싶은 생각이 들게 된다.</p><p>ORM에 의해 관리되는 엔티티들은 일반적으로 영속성 계층에 두고 도메인계층에선 엔티티에 접근가능한데 이러한 구조는 영속성 계층과 도메인 계층 사이에 강한 결합을 만들게 된다.</p><p>서비스에서 영속성 모델을 마치 비즈니스 모델처럼 사용하다보면 도메인 로직뿐만 아니라 영속성 계층과 관련된 작업들도 해줘야 한다.</p><p>영속성 코드가 사실상 도메인 코드에 녹아들면서 둘 중 하나만 바꾸는게 어려워져서 계층형의 목표와 대치되는 코드가 된다.</p><h2 id="지름길을-택하기-쉬워진다"><a href="#지름길을-택하기-쉬워진다" class="headerlink" title="지름길을 택하기 쉬워진다."></a>지름길을 택하기 쉬워진다.</h2><p>계층형 아키텍처는 특정한 계층에서는 같은 계층에 있는 컴포넌트나 아래에 있는 계층에만 접근 가능하다는 규칙이 있다.</p><p>만약 상위 계층에 위치한 컴포넌트에 접근해야 한다면? 컴포넌트를 계층 아래로 내려버리면 된다. 한번은 괜찮을 수 있다. 근데 2번, 3번이 넘고 나 뿐만 아니라 다른 동료들도 그렇게 하게 되면?</p><p>유틸리티나 헬퍼 컴포넌트 등이 아래 계층으로 내려오게 되면 영속성 계층은 모든 것에 접근 가능하기 때문에 시간이 지날 수록 점점 비대해 질 것이다.</p><h3 id="테스트하기-어려워진다"><a href="#테스트하기-어려워진다" class="headerlink" title="테스트하기 어려워진다."></a>테스트하기 어려워진다.</h3><p>계층형 아키텍처에서 계층을 건너뛰도록 하는 경우도 있다. 엔티티의 필드를 딱 하나만 조작하면 될 경우에 웹 계층에서 바로 영속성 계층에 접근하면 도메인 계층을 건너 뛰게 된다. 이런 경우 크게 두가지 문제가 발생하는데</p><ol><li>도메인 로직을 웹 계층에 구현하게 된다.<br>만약 유스케이스가 확장된다면 더 많은 도메인 로직이 웹 계층에 추가되면서 애플리케이션 전반으로 책임이 섞이고 핵심 도메인 로직들이 퍼져나갈 수 있다.</li><li>웹 계층 테스트에서 도메인 계층뿐만 아니라 영속성 계층도 모킹(mocking)해야 한다.<br>이 경우 단위 테스트의 복잡도가 올라가고 이렇게 복잡한 설정을 할 시간이 없어서 테스트를 안하게 되는 시작이 된다.</li></ol><h3 id="유스케이스를-숨긴다"><a href="#유스케이스를-숨긴다" class="headerlink" title="유스케이스를 숨긴다."></a>유스케이스를 숨긴다.</h3><p>기능을 추가하거나 변경할 적절한 위치를 찾는 일이 빈번하기 때문에 ㅐ아키텍처는 코드를 빠르게 탐색하는데 도움이 돼야 한다.</p><p>계층형 아키텍처에서는 도메인 로직이 여러 계층에 걸쳐 흩어지기 쉬운 환경이라 유스케이스가 “간단”해서 도메인 계층을 생략하면 웹 계층에 존재할 수도 있고, 도메인과 영속성 모두에 접근할 수 있도록 컴포넌트의 계층을 내리면 영속성 계층에 존재할 수도 있다.</p><p>이런 경우 새로운 기능을 추가할 적당한 위치를 찾기 어려워지고 여러 개의 유스케이스를 담당하는 아주 넓은 서비스가 만들어질 수도 있다.</p><p>넓은 서비스는 영속성 계층에 많은 의존성을 갖게되고, 웹 레이어의 많은 컴포넌트가 이 서비스에 의존하게 된다. 서비스는 점점 더 복잡해지고 테스트하기도 어려워진다.</p><h3 id="동시-작업이-어려워진다"><a href="#동시-작업이-어려워진다" class="headerlink" title="동시 작업이 어려워진다."></a>동시 작업이 어려워진다.</h3><p>새로운 기능을 추가하기 위해 3명의 개발자가 있을때 각 계층에 각각의 기능을 동시에 개발할 수 있을까?</p><p>계층형에선 영속성 계층 위에 모든 것이 만들어지기 때문에 영속성 계층을 먼저 개발ㄹ해야 하고, 그 다음에 도메인 계층, 웹 계층을 만들어야 한다.</p><p>동시에 한꺼번에가 아니라 한번에 한명의 개발자만 일할 수 있는 것이다.</p><p>또한 넓은 서비스가 있다면 서로 다른 기능을 동시에 작업하기 어려운데 병합 충돌(merge conflict)이나 롤백이 필요한 문제가 발생할 수 있다.</p><h3 id="유지보수-가능한-소프트웨어를-만드는-데-어떻게-도움이-될까"><a href="#유지보수-가능한-소프트웨어를-만드는-데-어떻게-도움이-될까" class="headerlink" title="유지보수 가능한 소프트웨어를 만드는 데 어떻게 도움이 될까?"></a>유지보수 가능한 소프트웨어를 만드는 데 어떻게 도움이 될까?</h3><p>올바르게 구축하고 몇 가지 추가적인 규칙들을 잘 적용한다면 계층형 아키텍처는 유지보수하기 매우 쉬워지며 코드를 쉽게 변경하거나 추가할 수 있다.</p><p>하지만 잘못된 방향으로 흘러가기 쉽다보니 계층형 아키텍처로 만들든 다른 아키텍처 스타일로 만들든, 지름길을 택하지 않고 유지보수하기에 더 쉬운 솔루션을 만드는 데 도움이될 것이다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/">만들면서 배우는 클린 아키텍처</category>
      
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2023/02/25/book/%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C%20%EB%B0%B0%EC%9A%B0%EB%8A%94%20%ED%81%B4%EB%A6%B0%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/clean-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker Desktop for window 경로 변경</title>
      <link>https://yoo0926.github.io/2022/01/08/docker/installation-directory/</link>
      <guid>https://yoo0926.github.io/2022/01/08/docker/installation-directory/</guid>
      <pubDate>Sat, 08 Jan 2022 07:19:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;회사pc에서 docker를 로컬에 설치해서 사용해볼 일이 있어서 설치를 하려는데 보안 프로그램 때문에 C드라이브에 제대로 설치가 안됐다.&lt;/p&gt;
&lt;p&gt;D드라이브에 설치를 하고 싶었는데 &lt;code&gt;Docker Desktop for window&lt;/c</description>
        
      
      
      
      <content:encoded><![CDATA[<p>회사pc에서 docker를 로컬에 설치해서 사용해볼 일이 있어서 설치를 하려는데 보안 프로그램 때문에 C드라이브에 제대로 설치가 안됐다.</p><p>D드라이브에 설치를 하고 싶었는데 <code>Docker Desktop for window</code> 설치파일에서 설치경로를 바꾸는 옵션을 제공하지 않고 있는데</p><p>🔗 <a href="https://github.com/docker/roadmap/issues/94">https://github.com/docker/roadmap/issues/94</a><br>(최근까지도 기다리는 사람이 많은듯?)</p><p>도커포럼에서 해당 이슈에 대한 임시 해결책으로 링크를 생성해서 설치경로를 바꾸는 방법이 있었다.</p><p>🔗 <a href="https://forums.docker.com/t/docker-installation-directory/32773/11">https://forums.docker.com/t/docker-installation-directory/32773/11</a></p><p>docker 설치 전 cmd를 관리자모드로 실행하고 아래 명령어를 실행한다.(xxx = 본인 계정)</p><p>만약 이미 한번 설치를 해서 각 위치에 폴더가 이미 생성된 상태라 C드라이브 경로에 생성된 폴더들 다 지우고 명령어 실행하면 된다. (타겟 경로의 폴더들은 나중에 만들어줘도 됨)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mklink /j <span class="string">&quot;C:\ProgramData\Docker&quot;</span> <span class="string">&quot;D:\ProgramData\Docker&quot;</span></span><br><span class="line">mklink /j <span class="string">&quot;C:\ProgramData\DockerDesktop&quot;</span> <span class="string">&quot;D:\ProgramData\DockerDesktop&quot;</span></span><br><span class="line">mklink /j <span class="string">&quot;C:\Program Files\Docker&quot;</span> <span class="string">&quot;D:\Program Files\Docker&quot;</span></span><br><span class="line">mklink /j <span class="string">&quot;C:\Users\xxx\AppData\Local\Docker&quot;</span> <span class="string">&quot;D:\Users\xxx\AppData\Local\Docker&quot;</span></span><br></pre></td></tr></table></figure><p>이후 installer를 실행해보면 로그에는 C드라이브에 설치하는거로 나오지만 실제 파일은 링크를 걸어놓은 D드라이브에 생성되는 모습을 볼 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/docker/">docker</category>
      
      
      <category domain="https://yoo0926.github.io/tags/docker/">docker</category>
      
      
      <comments>https://yoo0926.github.io/2022/01/08/docker/installation-directory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google Tag Manager 간단 정리</title>
      <link>https://yoo0926.github.io/2021/12/13/etc/gtm-1/</link>
      <guid>https://yoo0926.github.io/2021/12/13/etc/gtm-1/</guid>
      <pubDate>Mon, 13 Dec 2021 14:07:12 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;웹사이트 또는 모바일 앱에서 &lt;code&gt;태그&lt;/code&gt;라고 통칭되는 &lt;strong&gt;추적 코드 및 관련 코드 조각&lt;/strong&gt;을 쉽고 빠르게 업데이트할 수 있는 태그 관리 시스템&lt;/p&gt;
&lt;p&gt;여기서 태그는 웹페이지의 HTML 태그를 말하는게 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>웹사이트 또는 모바일 앱에서 <code>태그</code>라고 통칭되는 <strong>추적 코드 및 관련 코드 조각</strong>을 쉽고 빠르게 업데이트할 수 있는 태그 관리 시스템</p><p>여기서 태그는 웹페이지의 HTML 태그를 말하는게 아니고 마케팅 업계에서 <strong>자바스크립트로 데이터를 수집해서 웹 분석 및 광고 성과 추적용도로 사용하기 위해 서비스 제공업체(구글,네이버,페이스북 등)로 전달하는 역할을 수행하는 기능</strong>을 말한다.</p><p><code>컨테이너 코드 스니펫</code>(컨테이너 생성 시 헤더, 바디에 심으라고 하는 코드)이라는 기본 스크립트를 소스코드에 한번 추가하면 이후 개발자가 관여하지 않더라도 GTM에서 제공하는 UI를 통해 태그를 효율적으로 추가,삭제,변경 등 관리하기 위해 사용한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Google Tag Manager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">w,d,s,l,i</span>)</span>&#123;w[l]=w[l]||[];w[l].push(&#123;<span class="string">&#x27;gtm.start&#x27;</span>:</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),<span class="attr">event</span>:<span class="string">&#x27;gtm.js&#x27;</span>&#125;);<span class="keyword">var</span> f=d.getElementsByTagName(s)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">j=d.createElement(s),dl=l!=<span class="string">&#x27;dataLayer&#x27;</span>?<span class="string">&#x27;&amp;l=&#x27;</span>+l:<span class="string">&#x27;&#x27;</span>;j.async=<span class="literal">true</span>;j.src=</span></span><br><span class="line"><span class="javascript"><span class="string">&#x27;https://www.googletagmanager.com/gtm.js?id=&#x27;</span>+i+dl;f.parentNode.insertBefore(j,f);</span></span><br><span class="line"><span class="javascript">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">&#x27;script&#x27;</span>,<span class="string">&#x27;dataLayer&#x27;</span>,<span class="string">&#x27;GTM-A123456&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- End Google Tag Manager --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="컨테이너"><a href="#컨테이너" class="headerlink" title="컨테이너"></a>컨테이너</h2><p>태그를 관리하는 프로젝트 단위로 일반적으로 도메인별로 생성하며 <code>태그</code>,<code>트리거</code>,<code>변수</code> 3가지 요소를 사용해서 데이터를 추적</p><h2 id="변수-How"><a href="#변수-How" class="headerlink" title="변수(How)"></a>변수(How)</h2><p>특정 값을 담아두는 가상의 메모리 영역으로 어떠한 데이터를 수집할 지 지정하고 여러 이벤트에서 재사용하여 효율증가</p><blockquote><p>ex) 특정 페이지에 접속할때, 클릭할때 데이터를 수집할 경우 사전 정의된 url이라는 변수는 현재 로드중인 페이지의 URL을 변수로 사용할 수 있다.</p></blockquote><ul><li>트리거 : <strong>태그 실행 조건을 지정하는 필터를 정의하는 용도</strong> (ex: url 변수가 ‘example.com/index.html’일 때 페이지뷰 트리거를 실행하는 용도)</li><li>태그 : <strong>동적 값을 포착하여 전송</strong>하는 데 변수가 사용 (ex: 거래 금액과 구매 제품을 전환추적 태그에 전달하는 용도)</li></ul><p>기본 제공하는 변수로 처리할 수 없는 특정 요구사항에 맞추고 싶다면 <strong>사용자 정의 변수</strong>를 생성할 수 있다.</p><h2 id="트리거-When"><a href="#트리거-When" class="headerlink" title="트리거(When)"></a>트리거(When)</h2><p>태그(명령어)가 실행되는 조건을 정의하여 조건 충족 시 연결된 태그가 실행</p><blockquote><p>ex) 페이지뷰, 클릭할때 등 이벤트 실행 조건</p></blockquote><h2 id="태그-What"><a href="#태그-What" class="headerlink" title="태그(What)"></a>태그(What)</h2><p>데이터를 추적하여 수집하기 위해 명령하는 명령어의 역할로 트리거의 조건이 충족되면 태그가 인식하여 데이터를 추적하여 Google Analytics 등의 툴에서 데이터를 수집</p><p>쉽게 생각해서 트리거가 실행 조건을 담고 있고 태그는 실행 내용을 담고 있다고 생각하면 된다.</p><h2 id="데이터-영역-dataLayer"><a href="#데이터-영역-dataLayer" class="headerlink" title="데이터 영역(dataLayer)"></a>데이터 영역(dataLayer)</h2><p>웹사이트에서 태그 관리자 컨테이너로 정보를 전달할 때 사용되는 자바스크립트 객체</p><blockquote><p>웹사이트 –&gt; dataLayer &lt;–&gt; GTM –&gt; 구글 애널리틱스, 네이버광고 등</p></blockquote><p>구글 애널리틱스 사용 시 전자상거래 구매 데이터, 맞춤 측정기준에서 사용하는 데이터 등은 기본 추적코드만으로는 수집할 수 없어 추가적인 설정이 필요하다.</p><p>이때 주로 웹페이지 내 별도의 추적 코드를 소스코드에 삽입하여 이들 정보를 GA서버로 직접 보내는 방식을 사용하는데 GTM에선 이런 정보를 수집할 때 데이터 영역을 주로 사용한다.</p><p>코드 스니펫을 header에 추가하고</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.dataLayer = <span class="built_in">window</span>.dataLayer || [];</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dataLayer.push()</code> 명령어를 사용하면 데이터 영역에 정보를 추가할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;dataLayer.push(&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#x27;bookCategory&#x27;: &#x27;fiction&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#x27;bookTitle&#x27;: &#x27;Cien años de soledad&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#x27;bookAuthor&#x27;: &#x27;Gabriel García Márquez&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;);&quot;</span>&gt;</span>도서 세부정보<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>주의사항으로 GTM은 <code>컨테이너 스니펫</code> 실행 시 자동으로 데이터영역을 생성하며 이미 있는 경우 그 안의 변수를 가져다 사용하기 때문에 데이터영역은 GTM 컨테이너 스니펫보다 앞에 위치해야 한다고 한다.</p><hr><ul><li><p>그 외 태그,트리커,변수 생성 과정에 대한 자세한 방법은 아래 링크 참고</p><p>  <a href="https://marketology.co.kr/all-category/tag-manager/%EA%B5%AC%EA%B8%80-%ED%83%9C%EA%B7%B8-%EA%B4%80%EB%A6%AC%EC%9E%90-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95/">구글-태그-관리자-설치-및-사용법</a></p></li><li><p>태그, 트리거, 변수에서 설정가능한 유형에 대해선 태그 관리자 고객센터에서 각 항목 참고</p><ul><li><a href="https://support.google.com/tagmanager/?hl=ko#topic=3441647">태그 관리자 고객센터</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://yoo0926.github.io/tags/googleTagManager/">googleTagManager</category>
      
      
      <comments>https://yoo0926.github.io/2021/12/13/etc/gtm-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>4-2. 리액터 프로젝트 심화학습</title>
      <link>https://yoo0926.github.io/2021/12/03/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/4-2/</link>
      <guid>https://yoo0926.github.io/2021/12/03/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/4-2/</guid>
      <pubDate>Fri, 03 Dec 2021 13:20:10 GMT</pubDate>
      
        
        
      <description>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg&quot; width=&quot;50%&quot;&gt;
&lt;/p&gt;

&lt;h2 id=&quot;리액티브-스트림의-수명-주기&quot;&gt;&lt;a href=&quot;#리액티브-스트림</description>
        
      
      
      
      <content:encoded><![CDATA[<p align="center">  <img src="/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg" width="50%"></p><h2 id="리액티브-스트림의-수명-주기"><a href="#리액티브-스트림의-수명-주기" class="headerlink" title="리액티브 스트림의 수명 주기"></a>리액티브 스트림의 수명 주기</h2><h3 id="조립-assembling-단계"><a href="#조립-assembling-단계" class="headerlink" title="조립(assembling) 단계"></a>조립(assembling) 단계</h3><ul><li>처리 흐름에서 사용하는 연산자를 조합한 빌더 API처럼 보이지만 일반적인 빌더 패턴과 달리 리액터 API는 불변성(Immutability)을 제공한다.(적용된 각각의 연산자가 새로운 객체를 생성한다.)</li><li>스트림 구성을 조작하고 더나은 스트림 전달을 위한 다양한 기술을 적용할 수 있는 단계</li></ul><h3 id="구독-단계"><a href="#구독-단계" class="headerlink" title="구독 단계"></a>구독 단계</h3><ul><li>특정 Publisher를 구독할 때 발생</li><li>조립 단계에서 일련의 Publisher 체인이 연결되었고 최상위 래퍼를 구독하면 해당 체인에 대한 구독 프로세스가 시작된다.</li><li>조립단계와 동일한 최적화를 수행할 수 있다.</li><li>리액터에서 멀티 스레딩을 지원하는 일부 연산자는 구독이 발생하는 작업자를 변경할 수 있다.</li></ul><h3 id="런타임-단계"><a href="#런타임-단계" class="headerlink" title="런타임 단계"></a>런타임 단계</h3><ul><li>게시자와 구독자 간에 실제 신호가 교환되는 단계</li><li>교환하는 처음 두 신호는 <code>onSubscribe</code>, <code>request</code><ul><li>onSubscribe 메서드는 최상위 소스에서 호출</li><li>구독이 모든 구독자 체인을 통과하여 마지막 구독자가 구독 체인에 대한 정보를 수신하고 메시지 수신을 시작하려면 Subscription#request 메서드를 호출해 전송을 시작해야 한다.</li></ul></li><li>런타임 중에도 request를 줄이기 위한 최적화를 적용할 수 있다.</li></ul><h2 id="리액터에서-스레드-스케줄링-모델"><a href="#리액터에서-스레드-스케줄링-모델" class="headerlink" title="리액터에서 스레드 스케줄링 모델"></a>리액터에서 스레드 스케줄링 모델</h2><p>멀티스레딩 실행을 위해 제공하는 연산자 사이의 차이점에 대해서 확인</p><p>다른 워커로 실행을 전환할 수 있는 네 가지 연산자</p><h3 id="publishOn-연산자"><a href="#publishOn-연산자" class="headerlink" title="publishOn 연산자"></a>publishOn 연산자</h3><ul><li>런타임 실행의 일부를 지정된 워커로 이동</li><li>Scheduler 인터페이스를 사용하여 현재 스트림에 대한 특정 워커를 선택할 수 있다.</li><li>내부적으로 전용 워커가 메시지를 하나씩 처리할 수 있도록 새로운 원소를 제공하는 큐를 가지고 있다.</li><li>리액티브 스트림의 모든 원소는 하나씩(동시에는 아니지만) 처리되므로 항상 모든 이벤트에 순서를 엄격하게 정의할 수 있다.(이 속성을 **직렬성(serializability)**라고 한다.)</li><li>병렬 처리를 할 수 없다는 말처럼 들리지만 병렬 처리도 가능한데 예를 들어 처리 단계 사이에 비동기 영역을 추가해서 독립적으로 작업해 비동기 처리를 할 수 있다.</li></ul><h3 id="subscribeOn-연산자"><a href="#subscribeOn-연산자" class="headerlink" title="subscribeOn 연산자"></a>subscribeOn 연산자</h3><ul><li>구독체인에서 워커의 작업 위치를 변경</li><li>보통 호출 시점에서 상위 스트림에 해당하는 부분의 스레드를 설정</li></ul><h3 id="parallel-연산자"><a href="#parallel-연산자" class="headerlink" title="parallel 연산자"></a>parallel 연산자</h3><ul><li>하위 스트림에 대한 플로 분할과 분할된 플로 간 균형 조정 역할<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line">  .parallel()</span><br><span class="line">  .runOn(Schedulers.parallel())</span><br><span class="line">  .map()</span><br><span class="line">  .filter()</span><br><span class="line">  .subscribe()</span><br></pre></td></tr></table></figure></li><li>parallel연산자를 사용하면 <strong>ParallelFlux</strong>를 동작시킨다.<ul><li>다수의 Flux를 추상화하여 Flux간에 데이터의 크기 균형을 이룬다.</li></ul></li></ul><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><ul><li><code>Scheduler.schedule</code> : Runnable 작업을 예약가능</li><li><code>Scheduler.createWorker</code> : 동일한 방법으로 Runnable 작업 예약이 가능한 Worker 인터페이스의 인스턴스를 제공</li><li>Scheduler인터페이스 / Workder인터페이스의 차이점 : 워커 풀 / Thread 또는 리소스를 추상화한 것</li><li>리액터에서 제공하는 스케줄러 인터페이스의 3가지 주요 구현체<ul><li><code>SingleScheduler</code> : 모든 작업을 한 개의 전용 워커에 예약가능, 시간에 의존적</li><li><code>ParallelScheduler</code> : 고정된 크기의 작업자 풀에서 작동(CPU 코어 수로 기본크기 제한)</li><li><code>ElasticScheduler</code> : 동적으로 작업자를 만들고 스레드 풀을 캐시, 생성된 스레드 풀의 최대 개수는 제한되지 않음</li></ul></li></ul><h3 id="리액터-컨텍스트"><a href="#리액터-컨텍스트" class="headerlink" title="리액터 컨텍스트"></a>리액터 컨텍스트</h3><ul><li>Context는 스트림을 따라 전달되는 인터페이스</li><li>런타임 단계에서 필요한 컨텍스트 정보에 엑세스할 수 있도록 하는 것</li><li>멀티스레드 환경의 비동기 처리방식에서 ThreadLocal가 가지는 한계를 해결할 수 있다.<ul><li>변수에 데이터를 넣은 후 publishOn 등을 통해 다른 워커에서 작업 플로를 수행하면 데이터를 쌓은 스레드와 작업 스레드가 달라서 데이터에 접근할 수 없다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">실전! 스프링5를 활용한 리액티브 프로그래밍</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/12/03/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/4-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>4. 리액터 프로젝트 - 리액티브 앱의 기초</title>
      <link>https://yoo0926.github.io/2021/12/03/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/4/</link>
      <guid>https://yoo0926.github.io/2021/12/03/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/4/</guid>
      <pubDate>Fri, 03 Dec 2021 12:15:32 GMT</pubDate>
      
        
        
      <description>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg&quot; width=&quot;50%&quot;&gt;
&lt;/p&gt;

&lt;p&gt;리액티브 스트림 스펙은 리액티브 라이브러리가 서로 호환할 수 있게 해주며</description>
        
      
      
      
      <content:encoded><![CDATA[<p align="center">  <img src="/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg" width="50%"></p><p>리액티브 스트림 스펙은 리액티브 라이브러리가 서로 호환할 수 있게 해주며 여러 중요한 개선 사항이 많았지만 API 및 규칙만 정의하고 일상적인 사용을 위한 라이브러리는 제공하지 않았다.</p><p>리액티브 프레임워크중에서 가장 유명한 라이브러리 중 하나인 <code>리액터 프로젝트(Project Reactor)</code>는 1.x 버전에서 리액터 패턴, 함수형 프로그래밍 및 리액티브 프로그래밍과 같은 메시지 처리에 대한 모범 사례를 통합하여 비동기 논블로킹 처리를 지원하도록 설계하였다.</p><p>이후 여러 부족한 부분들을 보완하면서 2.x를 거쳐 현재는 3.x 버전으로 릴리즈되어있다.</p><h2 id="리액터-프로젝트-필수-요소"><a href="#리액터-프로젝트-필수-요소" class="headerlink" title="리액터 프로젝트 필수 요소"></a>리액터 프로젝트 필수 요소</h2><ul><li>비동기 파이프라인을 구축할 때 <strong>콜백 지옥</strong>과 <strong>깊게 중첩된 코드</strong>를 생략</li><li>코드 <strong>가독성</strong>을 높이고 리액터 라이브러리에 의해 정의된 워크플로에 **조합성(composability)**을 추가</li><li>리액터 API는 연산자를 연결해서 사용하는 것을 권장하며 이를 통해 복잡하고 재사용 가능한 실행 그래프(execution graph)를 작성할 수 있다.<ul><li>그래프는 실행 흐름만 정의하며 구독자가 <strong>실제 구독을 했을 때만 데이터 플로가 기동</strong>된다.</li></ul></li><li>오류 발생 가능성이 있는 비동기 요청의 결과를 <strong>효율적으로 처리</strong>하여 유연하지만 <strong>복원력</strong> 있는 코드를 작성할 수 있다.</li></ul><p>배압은 리액티브 스트림 스펙의 핵심 속성으로 리액터 역시 동일하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(데이터 플로)--▶️          --▶️         --▶️</span><br><span class="line">  게시자           연산자        연산자        구독자</span><br><span class="line">            ◀️--          ◀️--         ◀️--(요청)</span><br></pre></td></tr></table></figure><p>배압 전파의 일반적인 모드를 모두 지원</p><ul><li>푸시 전용 : subscription.request(Long.MAX_VALUE)</li><li>풀 전용 : subscription.request(1)</li><li>풀-푸시(혼합형) : 구독자가 수요를 실시간으로 제어할 수 있고 게시자가 데이터 소비 속도에 적응할 수 있는 경우</li><li>풀-푸시 모델을 지원하지 않는 이전 API를 적용할 때는 예전 스타일의 배압 메커니즘을 제공한다.</li></ul><h2 id="Flux와-Mono"><a href="#Flux와-Mono" class="headerlink" title="Flux와 Mono"></a>Flux와 Mono</h2><p>데이터를 기반으로 리액티브 스트림을 생성하는 팩토리 메서드를 제공</p><p>Mono는 Flux와 비슷하지만 하나의 요소를 대상으로 사용되는데 HTTP 요청이나 DB 쿼리와 같은 비동기 작업을 래핑하는데 매우 유용</p><p>Flux와 Mono는 구독 루틴을 단순화하는 <code>subscribe()</code> 메서드를 람다 기반으로 재정의한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br><span class="line">  .subscribe(</span><br><span class="line">    data -&gt; log.info(<span class="string">&quot;onNext: &#123;&#125;&quot;</span>, data),</span><br><span class="line">    err -&gt; &#123; <span class="comment">/* ignored */</span> &#125;,</span><br><span class="line">    () -&gt; log.info(<span class="string">&quot;onComplete&quot;</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">onNext: A</span></span><br><span class="line"><span class="comment">onNext: B</span></span><br><span class="line"><span class="comment">onNext: C</span></span><br><span class="line"><span class="comment">onComplete</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>또한 subscription으로 구독을 직접 제어하거나 직접 Subscriber 인터페이스를 구현하여 스트림을 구독할 수 있다.</p><h2 id="연산자를-이용해-리액티브-시퀀스-변환하기"><a href="#연산자를-이용해-리액티브-시퀀스-변환하기" class="headerlink" title="연산자를 이용해 리액티브 시퀀스 변환하기"></a>연산자를 이용해 리액티브 시퀀스 변환하기</h2><p>연산자의 종류가 너무 많아서 적절한 연산자를 선택하는 가이드를 포함한 아래 링크를 참조</p><p><a href="https://projectreactor.io/docs/core/release/reference/#which-operator">Which operator do I need?</a></p><ul><li>원소 매핑 : map(1:1) …</li><li>필터링 : filter …</li><li>시퀀스 수집? 합치기? : collectList() …</li><li>원소 줄이기 : reduce, scan …</li><li>스트림 조합 : concat, merge, zip …</li><li>스트림 내의 원소 일괄 처리<ul><li>buffer : List와 같은 컨테이너를 이용한 Buffering, <code>Flux&lt;List&lt;T&gt;&gt;</code></li><li>window : <code>Flux&lt;Flux&lt;T&gt;&gt;</code>와 같은 형태로 스트림을 스트림으로 Windowing</li><li>groupBy : <code>Flux&lt;GroupedFlux&lt;K, T&gt;&gt;</code> 유형의 스트림으로 Grouping</li></ul></li><li>flatmap : 논리적으로 map과 flatten의 2가지 작업으로 구성<ul><li>map파트는 들어오는 각 원소를 리액티브 스트림(<code>T -&gt; Flux&lt;R&gt;</code>)으로 변환</li><li>flatten파트는 생성된 모든 리액티브 시퀀스를 R 타입의 원소를 통과시키는 새로운 리액티브 시퀀스로 병합</li></ul></li><li>샘플링 : sample 연산자를 사용하여 특정 기간 내 최근에 관찰된 값을 주기적으로 출력할 수 있다.</li><li>블로킹 구조로 전환<ul><li>리액티브 애플리케이션에서 블로킹 처리를 해선 안되지만, 상위 API에서 필요로 하는 경우도 있음</li><li>blockFirst, blockLast, toIterable, toStream …</li><li><code>Mono#toFuture</code> 를 제외한 모든 메서드는 “non-blocking only”로 표시된 스케줄러에서 호출되면 UnsupportedOperatorException을 발생시킨다.</li></ul></li><li>시퀀스 엿보기<ul><li><code>doOnNext(Consumer &lt;T&gt;)</code>, <code>doOnComplete()</code>, <code>doOnError(Throwable)</code>…</li><li>최종 시퀀스를 수정하지 않고 프로세스 파이프라인의 중간에 있는 각 원소나 특정 시그널을 처리해야 하는 경우</li></ul></li></ul><h2 id="Hot-스트림과-cold-스트림"><a href="#Hot-스트림과-cold-스트림" class="headerlink" title="Hot 스트림과 cold 스트림"></a>Hot 스트림과 cold 스트림</h2><h3 id="1-콜드-퍼블리셔-cold-publisher"><a href="#1-콜드-퍼블리셔-cold-publisher" class="headerlink" title="1. 콜드 퍼블리셔(cold publisher)"></a>1. 콜드 퍼블리셔(cold publisher)</h3><ul><li>구독자가 나타날 때마다 시퀀스 데이터가 생성되는 방식</li><li>구독자 없이는 데이터 생성 X</li><li>대표적으로 HTTP 요청이 이런식으로 동작한다.<h3 id="2-핫-퍼블리셔-hot-publisher"><a href="#2-핫-퍼블리셔-hot-publisher" class="headerlink" title="2. 핫 퍼블리셔(hot publisher)"></a>2. 핫 퍼블리셔(hot publisher)</h3></li><li>데이터 생성 시 구독자의 존재 여부에 의존하지 않는 방식</li><li>첫 구독자가 없더라도 원소를 만들어 낼 수 있다.</li><li>이때 구독자가 나타나면 이전 생성값 말고 새로운 값만 보낼 수도 있다.</li><li>리액터 라이브러리에 포함된 대부분은 <code>Processor</code> 인터페이스를 상속한다.</li></ul><p>콜드 퍼블리셔를 리액티브 변환을 통해 핫 퍼블리셔로 전환할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">실전! 스프링5를 활용한 리액티브 프로그래밍</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/12/03/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>3. 스트림의 새로운 표준 - 리액티브 스트림</title>
      <link>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/3/</link>
      <guid>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/3/</guid>
      <pubDate>Sun, 28 Nov 2021 11:13:34 GMT</pubDate>
      
        
        
      <description>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg&quot; width=&quot;50%&quot;&gt;
&lt;/p&gt;

&lt;h2 id=&quot;API-불일치-문제&quot;&gt;&lt;a href=&quot;#API-불일치-문제&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<p align="center">  <img src="/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg" width="50%"></p><h2 id="API-불일치-문제"><a href="#API-불일치-문제" class="headerlink" title="API 불일치 문제"></a>API 불일치 문제</h2><p>CompletableStage를 이용하는 자바 코어 라이브러리와 RxJava 같은 다양한 라이브러리가 있어서, 코드를 작성할 때 다양한 선택을 할 수 있지만 과도하게 많은 선택지는 시스템을 지나치게 복잡하게 만들 수 있다.</p><p>핵심적인 문제는 라이브러리 공급자가 일관된 API를 만들어낼 수 있는 표준화된 방법이 없다는 사실이다.</p><h2 id="풀-방식과-푸시-방식"><a href="#풀-방식과-푸시-방식" class="headerlink" title="풀 방식과 푸시 방식"></a>풀 방식과 푸시 방식</h2><p>리액티브 초기 단계에서 모든 라이브러리의 데이터 흐름은 소스에서 구독자에게 푸시되는 방식이었다.</p><ul><li><p>풀 방식으로 요소를 하나씩 요청할 경우 비동기 논블로킹 방식을 사용하더라도 각 요소에 대한 요청을 처리 하면서 대기시간이 발생하여 전체 처리시간 중 많은 시간을 유휴 상태로 있게 된다.</p></li><li><p>푸시 방식을 도입하면서 요청하는 횟수를 최소화하여 전체 처리 시간을 최적화할 수 있었다.</p></li></ul><p><strong>하지만</strong> 푸시 모델만 사용하는 것은 기술적 한계가 있는데</p><ul><li>메시지 기반 통신의 본질은 <code>요청에 응답하는 것</code>인데</li><li>프로듀서가 컨슈머의 처리 능력을 무시하면 전반적인 시스템 안정성에 영향을 미칠 수 있기 때문이다.</li></ul><h2 id="흐름제어"><a href="#흐름제어" class="headerlink" title="흐름제어"></a>흐름제어</h2><ul><li><h3 id="느린-프로듀서와-빠른-컨슈머"><a href="#느린-프로듀서와-빠른-컨슈머" class="headerlink" title="느린 프로듀서와 빠른 컨슈머"></a>느린 프로듀서와 빠른 컨슈머</h3><p>  순수한 푸시 모델은 동적으로 시스템의 처리량을 증가시키는 것이 불가능하다.</p></li><li><h3 id="빠른-프로듀서와-느린-컨슈머"><a href="#빠른-프로듀서와-느린-컨슈머" class="headerlink" title="빠른 프로듀서와 느린 컨슈머"></a>빠른 프로듀서와 느린 컨슈머</h3><p>  프로듀서는 컨슈머가 처리할 수 있는 것보다 더 많은 데이터를 전송할 수 있으며 이로 인해 부하를 받는 컴포넌트에 치명적인 오류가 발생할 수 있다.</p></li></ul><p>이를 해결하기 위한 직관적인 방법은 <strong>큐에 수집하는 것</strong>인데 3가지 유형으로 구분할 수 있다.</p><ol><li>무제한 큐: 메모리 한도에 도달하면 전체 시스템이 손상될 가능성이 있다.(복원력이 떨어짐)</li><li>크기가 제한된 드롭 큐: 메시지의 중요성이 낮을 때 사용되는 방법으로 큐가 가득 차면 메시지를 무시하는데 중요한건 데이터 세트가 변경된다는 점이다.</li><li>크기가 제한된 블로킹 큐: 가장 느린 컨슈머의 처리량에 의해 시스템의 전체 처리량이 제한된다. 시스템의 비동기 동작을 모두 무효화하여 절대 받아들일 수 없는 시나리오다.</li></ol><p>이런 시스템 부하에 적절하게 대응하는 방법으로 <code>배압 제어 메커니즘</code>이 있다.</p><h2 id="리액티브-스트림의-기본-스펙"><a href="#리액티브-스트림의-기본-스펙" class="headerlink" title="리액티브 스트림의 기본 스펙"></a>리액티브 스트림의 기본 스펙</h2><p>리액티브 스트림 스펙에는 <code>Publisher</code>, <code>Subscriber</code>, <code>Subscription</code>, <code>Processor</code>의 네 가지 기본 인터페이스가 정의돼 있다.</p><ul><li><p>Publisher : Observable과 비교하면 Publisher와 Subscriber를 연결하기 위한 표준화된 진입점을 의미</p></li><li><p>Subscriber : Observer와 비슷한데 onSubscribe라는 추가 메서드를 제공하는데 Subscriber에게 구독이 성공했음을 알리는 API 메서드</p></li><li><p>Subscription : 원소 생성을 제어하기 위해 기본적인 사항을 제공</p><ul><li><p>cancel() : 스트림에서 구독을 취소하거나 발행을 완전히 취소 가능</p></li><li><p>request(long n) : 요청하는 Publisher가 보내줘야 하는 데이터 크기를 알려줄 수 있음 ▶️ Publisher에서 유입되는 원소의 개수가 처리할 수 있는 제한을 초과하지 않을 것을 확신할 수 있다.</p><p>리액티브 스트림은 순수 푸시 모델과는 달리 배압을 적절하게 제어할 수 있는 하이브리드 푸시-풀 모델을 제공한다.</p><ul><li>순수 푸시 모델을 사용하고 싶으면 최대 개수 요청 request(Long.MAX_VALUE)</li><li>순수 풀 모델을 사용하고 싶으면 onNext()가 호출될 때마다 요청</li></ul></li></ul></li><li><p>Processor : Publisher와 Subscriber의 혼합 형태로 Publisher와 Subscriber 사이에 몇가지 처리 단계를 추가하도록 설계됐다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt;, <span class="title">Publisher</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="리액티브-스트림-기술-호환성-키트-TCK"><a href="#리액티브-스트림-기술-호환성-키트-TCK" class="headerlink" title="리액티브 스트림 기술 호환성 키트(TCK)"></a>리액티브 스트림 기술 호환성 키트(TCK)</h2><p>모든 동작을 검증하고 반응 라이브러리를 표준화하여 서로 호환하는지 확인하는 공통 도구로 모든 리액티브 스트림 코드를 방어하고 지정된 규칙에 따라 구현을 테스트 한다.</p><p><a href="https://github.com/reactive-streams/reactive-streams-jvm/tree/master/tck">TCK github : https://github.com/reactive-streams/reactive-streams-jvm/tree/master/tck</a></p><hr><h2 id="리액티브-스트림을-활용한-비동기-및-병렬"><a href="#리액티브-스트림을-활용한-비동기-및-병렬" class="headerlink" title="리액티브 스트림을 활용한 비동기 및 병렬"></a>리액티브 스트림을 활용한 비동기 및 병렬</h2><ul><li><p>리액티브 스트림 API는 Publisher가 생성하고 Subscriber가 소비한 <strong>모든 신호는 처리 중에 논블로킹</strong>이어야 하며 방해받지 않아야 한다고 규칙에 명시되어 있다.</p></li><li><p>모든 프로세서나 코어를 효율적으로 사용하려면 <strong>병렬처리</strong>가 필요하고 이는 일반적으로 onNext 메서드를 병렬로 호출하는 것을 뜻하지만 on*** 메서드의 호출은 <strong>스레드 안전성을 보장하는 방식</strong>으로 신호를 보내야 하며 다중 스레드에서 수행되는 경우 <strong>외부적인 동기화를 사용</strong>해야 한다. <strong>즉, 스트림의 요소를 병렬 처리할 수 없다.</strong></p></li><li><p>자원을 효율적으로 활용하기 위해 스트림 처리 파이프의 각 단계에 메시지를 비동기적으로 전달하는 것이다.</p><ul><li>상황에 따라서 처리단계를 각각 별도의 스레드로 처리하고 각 스레드 사이에 큐와 같은 데이터 구조를 적용하여 메시지를 독립적으로 제공하고 사용하도록 할수 있다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">실전! 스프링5를 활용한 리액티브 프로그래밍</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2. 스프링을 이용한 리액티브 프로그래밍 - 기본 개념</title>
      <link>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2/</link>
      <guid>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2/</guid>
      <pubDate>Sun, 28 Nov 2021 10:38:12 GMT</pubDate>
      
        
        
      <description>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg&quot; width=&quot;50%&quot;&gt;
&lt;/p&gt;

&lt;h2 id=&quot;관찰자-Observer-패턴&quot;&gt;&lt;a href=&quot;#관찰자-Obse</description>
        
      
      
      
      <content:encoded><![CDATA[<p align="center">  <img src="/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg" width="50%"></p><h2 id="관찰자-Observer-패턴"><a href="#관찰자-Observer-패턴" class="headerlink" title="관찰자(Observer) 패턴"></a>관찰자(Observer) 패턴</h2><ul><li>이벤트를 발생시키는 역할(주체<em>Subject</em>), 이벤트를 수신하는 역할(객체, 즉 관찰자<em>Observer</em>)의 두가지 핵심 요소가 존재</li><li><strong>Observer</strong>는 <strong>Subject</strong>에 등록되고 Subject로부터 알림을 수신</li></ul><p>Java의 내장 클래스인 Observable, Observer는 <strong>java9 부터 deprecated</strong> 되었다.</p><ul><li>interface가 아니라 class로 구현되어 있어서 이미 다른 클래스를 상속받은 클래스가 Observable을 상속할 수 없어서 재사용성에 제약이 생긴다.</li><li>Observable의 핵심 메소드 중 하나인 setChanged() 메소드가 protected로 정의되어 있어서 사용하려면 상속받은 서브클래스만 해당 메소드를 호출할 수 있다.</li><li>Observable의 알림은 순서를 보장할 수 없고 상태 변경 역시 1:1로 일치하지 않아서 멀티 스레드 환경에서 thread-safe 하지 않다.</li><li>Serializable을 구현하지 않기 때문에 Observable을 상속받은 서브클래스도 직렬화할 수 없다.</li></ul><h2 id="발행-구독-패턴"><a href="#발행-구독-패턴" class="headerlink" title="발행-구독 패턴"></a>발행-구독 패턴</h2><p>스프링 프레임워크는 이벤트처리를 위해 <code>@EventListener</code>어노테이션과 이벤트 발행을 위한 <code>ApplicationEventPublisher</code>클래스를 제공한다.</p><p>관찰자 패턴과의 차이점은 게시자와 구독자 사이에 간접적인 <code>이벤트 채널(=메시지 브로커 or 이벤트 버스)</code>을 제공하여 구독자는 이벤트 채널은 알고 있지만 게시자가 누구인지는 신경쓰지 않는다.</p><p><code>SseEmitter</code>를 사용하면 스프링 프레임워크를 브로커를 사용하여 발행-구독 패턴을 구현할 수 있다.<br>다만 로직을 구현함에 있어 스프링의 내부 메커니즘을 사용했고 이는 프레임워크의 변경으로 인해 프로그램의 안정성을 보장할 수 없는 단점이 있다.</p><h2 id="리액티브-프레임워크-RxJava"><a href="#리액티브-프레임워크-RxJava" class="headerlink" title="리액티브 프레임워크 RxJava"></a>리액티브 프레임워크 RxJava</h2><p>자바 플랫폼에서 리액티브 프로그래밍을 위한 표준 라이브러리는 RxJava 1.x 였고 현재(2021 기준)는 2.x를 지나 3.x까지 출시되었다.</p><p><code>RxJava</code> 라이브러리는 **Reactive Extensions(혹은 ReactiveX)**의 자바 구현체로 종종 관찰자 패턴, 반복자 패턴 및 함수형 프로그래밍의 조합으로 정의된다.</p><p>RxJava의 기본적인 Observer 인터페이스는 아래와 같이 설계할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RxObserver</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T next)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RxJava에서 아래와 같이 주기적으로 비동기 이벤트 시퀀스를 생성할 경우 이벤트가 생성되는 것과 별개의 스레드에서 사용되기 때문에 메인 스레드가 종료되지 않도록 sleep()을 쓰거나 다른<br>방법으로 종료를 지연시킬 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">    .subscribe(e -&gt; System.out.println(<span class="string">&quot;Received: &quot;</span> +e));</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h2 id="마블-다이어그램"><a href="#마블-다이어그램" class="headerlink" title="마블 다이어그램"></a>마블 다이어그램</h2><p>RxJava는 연산자를 통해 스트림의 원소를 조정하거나 구조 자체를 변경할 수 있다. 연산자가 복잡한 변환을 수행할 경우 이를 시각적으로 표현하여 그 동작을 효과적으로 설명하기 위한 목적으로 <code>마블 다이어그램(marble diagram)</code>이 발명됐다.</p><p align="center">    <img src="/img/book/스프링5를-활용한-리액티브-프로그래밍/marble-1.png" width="70%"></p><ul><li>위아래 실선(ㅡ&gt;) : Observable의 시간흐름(Timeline)을 의미한다.</li><li>각 도형(○,□) : Observable에서 발행하는 데이터로 발행될때마다 <code>onNext</code> 메서드가 호출된다.</li><li>파이프(<code>|</code>) : 데이터 발행을 모두 완료했다는 의미로 <code>onCompleted</code> 메서드가 호출된다.</li><li>위에서 아래로 점선(—&gt;) : 함수의 입력,출력을 의미한다.</li><li>가운데 박스 : 함수를 의미하며 입력된 값에 어떤 변환작업을 하는지 나타내고 있다.</li><li>엑스(<code>X</code>) : 함수에서 입력된 값을 처리하는 중 에러가 발생하거나 비정상적으로 종료되었음을 의미하며 <code>onError</code> 메서드가 호출된다.</li></ul><p>RxJava와 관련된 모든 연산자는 이러한 마블다이어그램으로 표현되고 있으니 익숙해질 필요가 있다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">실전! 스프링5를 활용한 리액티브 프로그래밍</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>1. 왜 리액티브 스프링인가?</title>
      <link>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1/</link>
      <guid>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1/</guid>
      <pubDate>Sun, 28 Nov 2021 09:08:27 GMT</pubDate>
      
        
        
      <description>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg&quot; width=&quot;50%&quot;&gt;
&lt;/p&gt;

&lt;h2 id=&quot;리액티브-반응형-이-필요한-이유&quot;&gt;&lt;a href=&quot;#리액티브-반</description>
        
      
      
      
      <content:encoded><![CDATA[<p align="center">  <img src="/img/book/스프링5를-활용한-리액티브-프로그래밍/book-cover.jpg" width="50%"></p><h2 id="리액티브-반응형-이-필요한-이유"><a href="#리액티브-반응형-이-필요한-이유" class="headerlink" title="리액티브(반응형)이 필요한 이유"></a>리액티브(반응형)이 필요한 이유</h2><ul><li>증가하는 요청, 부하에 대해서 높은 응답성을 유지해야 한다.</li><li><strong>메시지 기반 통신</strong>을 바탕으로 <strong>탄력성</strong>과 <strong>복원력</strong>을 확보하하여 높은 응답성을 추구한다.</li></ul><h2 id="탄력성"><a href="#탄력성" class="headerlink" title="탄력성"></a>탄력성</h2><ul><li>자원을 비례적으로 추가하거나 제거하여 시스템의 처리량의 자동으로 증감 하는 것</li></ul><h2 id="복원력"><a href="#복원력" class="headerlink" title="복원력"></a>복원력</h2><ul><li>시스템의 실패에도 반응성을 유지하는 것</li><li>시스템의 기능 요소를 격리해 모든 내부 장애를 격리하고 독립성을 확보함으로써 달성</li></ul><h2 id="메시지-기반-통신-Message-driven"><a href="#메시지-기반-통신-Message-driven" class="headerlink" title="메시지 기반 통신(Message-driven)"></a>메시지 기반 통신(Message-driven)</h2><ul><li>제한된 리소스의 활용도를 높이기 위해서 비동기 논블로킹 모델을 사용해야 한다.</li><li>메시지 브로커를 사용하면 대기열을 모니터링하여 시스템의 부하관리 및 탄력성을 제어할 수 있다.</li></ul><p><a href="https://www.reactivemanifesto.org/ko/glossary">리액티브 선언문(https://www.reactivemanifesto.org/ko/glossary)</a></p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">실전! 스프링5를 활용한 리액티브 프로그래밍</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/11/28/book/%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%815%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>카카오톡 오픈그래프 캐시 삭제 방법</title>
      <link>https://yoo0926.github.io/2021/11/21/blog/ogimage-reset/</link>
      <guid>https://yoo0926.github.io/2021/11/21/blog/ogimage-reset/</guid>
      <pubDate>Sun, 21 Nov 2021 11:11:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;블로그 대표 이미지를 변경했음에도 카카오톡에 공유 시 기존 이미지가 계속 나오는 문제가 있었다.&lt;/p&gt;
&lt;p style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/img/blog/ogimage-reset/link_image1.p</description>
        
      
      
      
      <content:encoded><![CDATA[<p>블로그 대표 이미지를 변경했음에도 카카오톡에 공유 시 기존 이미지가 계속 나오는 문제가 있었다.</p><p style="text-align:center">  <img src="/img/blog/ogimage-reset/link_image1.png" alt="블로그 링크 이미지 변경 전"></p><p>사이트의 소스코드의 태그를 확인해봐도, 오픈그래프 적용을 확인해볼수 있는 페이스북의 <a href="https://developers.facebook.com/tools/debug/">Sharing Debugger</a> 사이트에서도 확인했을 때 문제가 없었으니</p><p>카카오에서 이미지 캐시가 문제라고 생각되서 구글링을 해봤고 역시 삭제하는 방법을 찾을 수 있었다.</p><h2 id="삭제방법"><a href="#삭제방법" class="headerlink" title="삭제방법"></a>삭제방법</h2><ol><li><p>카카오 개발자 사이트의 초기화 도구에서 <a href="https://developers.kakao.com/tool/clear/og">OG(Open Graph) 캐시</a>로 들어간다.</p></li><li><p>개발자 계정이 없다면 카카오 계정으로 간단하게 가입하고 있으면 로그인</p></li><li><p>삭제하려는 URL을 입력하고 초기화 한다.</p></li></ol><p style="text-align:center">  <img src="/img/blog/ogimage-reset/kakao_og_cache.png" alt="og 캐시 초기화"></p><p>이제 다시 카카오톡에 링크를 공유해보면 바뀐 이미지가 나오는걸 확인할 수 있다.</p><p style="text-align:center">  <img src="/img/blog/ogimage-reset/link_image2.png" alt="블로그 링크 이미지 변경 후"></p><hr><p>참고로 open graph 라는건 html 메타 태그의 종류 중 하나로 사용자가 링크를 sns의 입력창에 입력하면 크롤러가 미리 그 웹사이트를 방문해서 HTML head의 오픈그래프 메타 데이터를 긁어온다.</p><p>og:title, og:description, og:image 등 태그의 데이터를 바탕으로 미리보기 이미지와 설명을 만들어서 보여주게 된다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/blog/">blog</category>
      
      
      <category domain="https://yoo0926.github.io/tags/blog/">blog</category>
      
      <category domain="https://yoo0926.github.io/tags/open-graph/">open graph</category>
      
      <category domain="https://yoo0926.github.io/tags/kakaotalk/">kakaotalk</category>
      
      
      <comments>https://yoo0926.github.io/2021/11/21/blog/ogimage-reset/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Angular 개요</title>
      <link>https://yoo0926.github.io/2021/11/13/angular/%EA%B0%9C%EC%9A%94/</link>
      <guid>https://yoo0926.github.io/2021/11/13/angular/%EA%B0%9C%EC%9A%94/</guid>
      <pubDate>Sat, 13 Nov 2021 09:12:57 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;회사 프론트엔드가 Angular로 되어있는데 이쪽을 메인잡으로 일하진 않지만 프론트 개발자를 많이 채용해서 완전히 업무를 분리하기 전까지 이쪽도 어느정도 할줄 알아야 할거같아서 Angular에 대해서 공부하면서 간단히 정리해보자&lt;/p&gt;
&lt;h2 i</description>
        
      
      
      
      <content:encoded><![CDATA[<p>회사 프론트엔드가 Angular로 되어있는데 이쪽을 메인잡으로 일하진 않지만 프론트 개발자를 많이 채용해서 완전히 업무를 분리하기 전까지 이쪽도 어느정도 할줄 알아야 할거같아서 Angular에 대해서 공부하면서 간단히 정리해보자</p><h2 id="Angular❓"><a href="#Angular❓" class="headerlink" title="Angular❓"></a>Angular❓</h2><p><strong>Angular</strong>는 Google에서 만든 **SPA(Single Page Application)**방식의 프론트엔드 개발을 위한 <strong>자바스크립트 프레임워크</strong> 이다.</p><p>개발언어로 es6, Dart 등을 지원하기도 하지만 공식적으로 <code>TypeScript</code>를 권장하고 있다.</p><p>Angular 1.x 버전을 AngularJS, Angular 2 이상 버전을 Angular 라고 부른다.</p><p>AngularJS와 Angular는 하위 호환성이 없는 브레이킹 체인지를 다수 포함하여 큰 차이점이 많은데 몇가지 정리를 하자면</p><ul><li><strong>Controller</strong>와 <strong>$scope</strong> 기반에서 <code>컴포넌트 기반 개발(CBD, Component Based Development)</code>로 전환되었다.</li><li>이전보다 향상된 모듈 시스템과 DOM 제어 기능을 제공하며 API가 단순화 되었다.</li><li>주력 개발언어로 <code>TypeScript</code>를 도입하여 대규모 개발에 적합한 정적타입과 인터페이스, 제네릭 등 타입체크지원 기능을 제공한다.</li><li>ECMAScript6에서 새롭게 도입된 모듈, 클래스, ECMAScript7의 데코레이터를 지원한다.</li><li>간단한 명령어로 개발환경을 지원하여 프로젝트 스케폴딩을 생성, 실행, 빌드할 수 있는 <code>Angular CLI</code>를 제공한다.</li></ul><h2 id="Angular-장점👍"><a href="#Angular-장점👍" class="headerlink" title="Angular 장점👍"></a>Angular 장점👍</h2><ol><li><strong>컴포넌트 기반</strong>의 기능에 따라 코드분리와 재사용성이 쉬운 장점이 있다.</li><li>SPA방식으로 다른 페이지로의 <strong>전환 속도</strong>가 빠르다.</li><li><strong>프레임워크</strong>로서 개발에 필요한 대부분의 기능을 탑재하고 있다.</li></ol><h2 id="Angular-단점👎"><a href="#Angular-단점👎" class="headerlink" title="Angular 단점👎"></a>Angular 단점👎</h2><ol><li>TypeScript를 주언어로 사용하여 이에 대한 학습이 필요하고 추가로 Angular의 여러 개념들과 기능들을 익혀야 하는만큼 <strong>학습량이 높은 편</strong>이다.</li><li>웹페이지가 모두 로딩된 이후 전환은 빠른편이지만 <strong>초기 로딩 시 느린 편</strong>이다.</li><li><strong>검색엔진 최적화</strong>가 잘 되지 않아서 구글을 제외한 다른 사이트들에서 제대로 수집되지 않는 경우가 있다고 한다.</li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://yoo0926.github.io/2021/11/13/angular/%EA%B0%9C%EC%9A%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>유클리드 호제법</title>
      <link>https://yoo0926.github.io/2021/09/02/algo/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/</link>
      <guid>https://yoo0926.github.io/2021/09/02/algo/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/</guid>
      <pubDate>Thu, 02 Sep 2021 06:55:17 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;유클리드 호제법(Euclidean algorithm)은 최대공약수, 최소공배수를 구하는 가장 대중적인 알고리즘으로&lt;/p&gt;
&lt;p&gt;호제법이란 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘을 말한다.&lt;/p&gt;
&lt;blockquote&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>유클리드 호제법(Euclidean algorithm)은 최대공약수, 최소공배수를 구하는 가장 대중적인 알고리즘으로</p><p>호제법이란 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘을 말한다.</p><blockquote><p>2개의 자연수 a,b에 대해서 a를 b로 나눈 나머지를 r이라고 한다면 (단, a&gt;b)<br>a와 b의 최대공야수는 b와 r의 최대공약수와 같다.</p><p>이 성질에 따라, b를 r로 나눈 나머지 r’를 구하고, 다시 r을 r’로 나눈 나머지를 구하는 과정을 반복하여 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수이다.</p></blockquote><p>이해하기 쉽게 예를 들어 108과 78의 최대공약수를 구해보면 아래와 같은 연산을 할 수 있다.</p><blockquote><p>108 % 78 = 30 // 큰수를 작은수로 나누고 나머지를 구하기<br>78 % 30 = 18 // 위에서 나눈수(78)를 가져와 위의 나머지로 다시 나눠서 나머지 구하기<br>30 % 18 = 12 // 반복<br>18 % 12 = 6<br>12 % 6 = 0 // 나머지가 0이 되면 이때 나눈 수가 최대공약수(=6)</p></blockquote><p>그렇다면 최소공배수는 어떻게 구할까?</p><p>최소공배수의 규칙에서 두 수 a,b가 있을 때 <code>a * b = 최대공약수 * 최소공배수</code> 라는 공식이 성립한다.</p><p>따라서 주어진 두수를 곱하고 최대공약수로 나눠준다면 그 수가 최소공배수가 될 것이다.</p><blockquote><p>108 * 78 / 6 = 1404</p></blockquote><p>이를 간단하게 코드로 구현해보면 다음과 같다.</p><script src="https://gist.github.com/yoo0926/253e8a250ea26cb1689edb8f2f58c4ac.js"></script>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/algorithm/">algorithm</category>
      
      
      <category domain="https://yoo0926.github.io/tags/algorithm/">algorithm</category>
      
      
      <comments>https://yoo0926.github.io/2021/09/02/algo/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>기술면접 준비(Java)</title>
      <link>https://yoo0926.github.io/2021/08/21/interview/technical-1/</link>
      <guid>https://yoo0926.github.io/2021/08/21/interview/technical-1/</guid>
      <pubDate>Sat, 21 Aug 2021 08:25:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;내용은 기초적인 부분이지만 막상 면접 전에 한번이라도 정리하지 않으면 용어가 바로바로 안나오는 경우도 많기 때문에 간단하게나마 정리해 보았다.&lt;/p&gt;
&lt;h2 id=&quot;OOP란&quot;&gt;&lt;a href=&quot;#OOP란&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<p>내용은 기초적인 부분이지만 막상 면접 전에 한번이라도 정리하지 않으면 용어가 바로바로 안나오는 경우도 많기 때문에 간단하게나마 정리해 보았다.</p><h2 id="OOP란"><a href="#OOP란" class="headerlink" title="OOP란"></a>OOP란</h2><p><code>객체지향 프로그래밍(Object-Oriented Programming, OOP)</code>은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것 입니다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있으며 대표적인 특징으로 추상화, 상속, 캡슐화, 다형성이 있습니다.</p><h2 id="직렬화-serialization-란"><a href="#직렬화-serialization-란" class="headerlink" title="직렬화(serialization)란?"></a>직렬화(serialization)란?</h2><p>객체 또는 데이터를 스트림을 통해 입출력하려면 <code>바이트(byte)형태로 변환</code>하는 것이 필요한데, 이를 <code>직렬화</code> 라고 합니다. 반대로 스트림을 통해 받은 직렬화된 객체를 원래 모양으로 만드는 과정을 <code>역직렬화</code>라고 합니다.</p><h2 id="박싱과-언박싱이란"><a href="#박싱과-언박싱이란" class="headerlink" title="박싱과 언박싱이란?"></a>박싱과 언박싱이란?</h2><p><strong>기본 자료형(Primitive data type)을 Wrapper class</strong>로 바꾸어 주는 것을 <code>박싱</code>, **Wrapper class를 기본 자료형(Primitive data type)**으로 바꿔주는 것을 <code>언박싱</code> 이라고 합니다.</p><h2 id="Static에-대해서"><a href="#Static에-대해서" class="headerlink" title="Static에 대해서"></a>Static에 대해서</h2><ul><li><code>static</code> 키워드를 쓰면 객체를 생성하지 않아도 static 변수나 static 함수를 사용할 수 있습니다.</li><li>인스턴스를 생성하면 각 인스턴스는 서로 독립적이기 때문에 서로 다른 값을 유지합니다.</li><li>각 인스턴스들이 공통적으로 같은 값이 유지되어야 하는 경우 static을 붙입니다.</li><li>static 이 붙은 메서드 에서는 인스턴스 변수를 사용할 수 없습니다.</li><li>메서드 내에서 인스턴스 변수를 쓰지 않는다면 가능하면 static을 붙이는게 호출 시간이 짧아지기 때문에 효율이 높아집니다.</li><li>클래스 설계시 static 사용 지침<ul><li>클래스의 멤버변수 중 모든 인스턴스에 공통된 값을 유지해야 하는 것이 있으면 static 을 사용합니다.</li><li>메서드 중에서 인스턴스 변수를 사용하지 않는 메서드는 static 을 사용하는 것을 고려합니다.</li></ul></li></ul><h2 id="접근-제어자에-대해서"><a href="#접근-제어자에-대해서" class="headerlink" title="접근 제어자에 대해서"></a>접근 제어자에 대해서</h2><ul><li>public : 어디서든 접근 가능</li><li>protected : 동일 패키지 혹은 상속받은 외부 패키지 클래스에서 사용</li><li>(default) : 동일 패키지 내에서만 접근 가능</li><li>private : 해당 클래스 내에서만 접근 가능</li></ul><h2 id="String-vs-StringBuffer-vs-StringBuilder"><a href="#String-vs-StringBuffer-vs-StringBuilder" class="headerlink" title="String vs StringBuffer vs StringBuilder"></a>String vs StringBuffer vs StringBuilder</h2><ul><li>String<ul><li><code>immutable(불변)</code></li><li>객체를 한 번 할당할시 <strong>메모리 공간에 변동이 없습니다</strong>.</li><li>동기화를 신경쓰지 않아도 됩니다.</li><li>엄청나게 많은 문자열을 선언 및 연산할 시 성능저하를 고려해야합니다.</li></ul></li><li>StringBuffer<ul><li><code>mutable(가변)</code></li><li>멀티스레드 환경에서도 <strong>동기화를 지원(Thread-safe)</strong></li></ul></li><li>StringBuilder<ul><li><code>mutable(가변)</code></li><li>동기화를 지원하지 <strong>않습니다</strong>.</li></ul></li><li>정리하면 적은 양의 문자열의 선언 후 연산이 필요없다면 String을 사용하고 문자열의 선언이 많이 필요하거나 연산이 필요한데 싱글스레드 환경이라면 StringBuilder를, 멀티스레드 환경이라면 StringBuffer를 사용합니다.</li></ul><h2 id="Java8-특징은"><a href="#Java8-특징은" class="headerlink" title="Java8 특징은?"></a>Java8 특징은?</h2><p>java에 <code>함수형 프로그래밍</code>이 처음으로 도입된 버전으로 새로 도입된 주요 기능으론<code>Lamda 표현식</code>, <code>Stream API</code>, <code>Optional Class</code> 같은 게 있습니다.</p><ul><li><p><strong>람다(Lamda) 표현식</strong></p><ul><li>익명함수로 이름과 식별자가 없는 함수를 말합니다. 불필요한 코드를 줄이고 가독성을 향상시키기 위함입니다.</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.forEach(num -&gt; System.out.println(<span class="string">&quot;number : &quot;</span> + num));</span><br></pre></td></tr></table></figure></li><li><p><strong>StreamAPI</strong></p><ul><li>람다식을 적용해서 컬렉션같은 데이터 처리연산을 하기 위한 api로 멀티 스레드를 활용해서 병렬로 연산을 수행할 수 있고, 원본 데이터를 변경하지 않는 특징이 있고 코드가 매우 간단해진다는 것을 알 수 있습니다.</li></ul></li><li><p><strong>Optional Class</strong></p><ul><li>util 패키지에 속하며 <code>NullPointException</code>을 관리하기 위해 null이 될 수 있는 객체를 감싸고 있는 래퍼 클래스입니다.</li><li>명시적으로 해당 변수가 null일 수 있음을 표현하면서 null 체크를 직접하지 않아도 됩니다.</li><li>아래는 일반적으로 많이 사용되는 optional 예제코드</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserEntity</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;UserEntity&gt; <span class="title">findByName</span><span class="params">(String Name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">&quot;jay&quot;</span>;</span><br><span class="line">UserEntity optUserEntity = userRepository.findByName(name)</span><br><span class="line">          .orElseThrow(() -&gt; <span class="keyword">new</span> EmptyDataException(<span class="string">&quot;해당 이름을 가진 유저가 없습니다.&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="try-with-resource란"><a href="#try-with-resource란" class="headerlink" title="try-with-resource란?"></a>try-with-resource란?</h2><p>try-with-resources는 java7 이후 추가되었으며 <code>자동으로 자원을 해제해주는 기능</code>입니다.<br>try 구문에 <code>AutoCloseable 인터페이스</code>를 구현하는 객체를 리소스로 선언하고 사용이 끝나면 자동으로 close 해주는 기능입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">&quot;newFile.txt&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(scanner.nextLine());</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="오버로딩-오버라이딩-차이점은"><a href="#오버로딩-오버라이딩-차이점은" class="headerlink" title="오버로딩 오버라이딩 차이점은?"></a>오버로딩 오버라이딩 차이점은?</h2><p>자바에서 다형성을 지원하는 방법으로 오버로딩과 오버라이딩이 있습니다.</p><p>(다형성(polymorphism) : 하나의 객체가 여러타입을 가지는 것)</p><ul><li>오버로딩(Overloading)은 <code>같은 이름</code>의 메소드를 여러 개 가지면서 <code>매개변수의 유형과 개수가 다르도록</code> 작성하여 다양한 유형의 호출에 응답하도록 하는 것입니다.<ul><li>프로그램의 가독성 ⬆</li></ul></li><li>오버라이딩(Overriding)은 상위클래스가 가진 메소드를 <code>자식클래스에서 재정의</code> 하여 사용하는 것을 말합니다.<ul><li>하나의 코드로 여러 객체를 처리할 수 있는 장점이 있어서 사용</li></ul></li></ul><table><thead><tr><th>명칭</th><th>메소드명</th><th>매개변수</th><th>리턴타입</th></tr></thead><tbody><tr><td>오버로딩</td><td>같음</td><td>다름</td><td>같아도되고 달라도됨</td></tr><tr><td>오버라이딩</td><td>같음</td><td>같음</td><td>같아야함</td></tr></tbody></table><h2 id="HashMap-LinkedHashMap-TreeMap-비교"><a href="#HashMap-LinkedHashMap-TreeMap-비교" class="headerlink" title="HashMap, LinkedHashMap, TreeMap 비교"></a>HashMap, LinkedHashMap, TreeMap 비교</h2><ol><li>HashMap<ul><li>내부적으로 Entry의 array로 되어있고 해당 array에 index는 내부 해쉬 함수를 통해 계산합니다.</li><li>hashing을 사용하기 때문에 많은 양의 데이터를 검색하는데 뛰어난 성능을 가지고 있지만 내부 해시값에 따라서 키순서가 정해져서 특정 순서나 규칙없이 출력됩니다.</li></ul></li><li>LinkedHashMap<ul><li>내부적으로 LinkedList 형태로 저장되며 입력된 데이터의 순서를 유지할 수 있습니다.</li><li>HashMap과 기본적으로 기능은 동일하지만 순서를 유지하는 기능이 추가되면서 메모리 사용량이 더 높습니다.</li></ul></li><li>TreeMap<ul><li>Key값에 따라서 자동으로 Sort가 되는 방식이며 동기화(synchronized) 처리가 되어있어 Thread-safe 합니다.</li><li>HashMap과 다르게 키값으로 null을 허용하지 않고 내부적으로 red black tree 구조로 데이터를 저장합니다.<ul><li>red black tree 는 기존의 이진트리의 각 노드에 색깔을 저장하는 공간을 추가해서 색깔을 기준으로 균형을 맞추는 트리입니다.</li></ul></li><li>키값에 대한 Compartor(콤퍼레이터) 구현으로 정렬 순서를 변경할 수 있습니다.</li></ul></li></ol><p>정리하자면</p><ul><li>특별한 사유가 없다면 검색성능이 가장 좋은 HashMap 사용</li><li>순서를 보장하고 싶다면 LinkedHashMap 사용</li><li>키값을 일정하게 iterate 하고자한다면 TreeMap 사용</li></ul><h2 id="interface-vs-abstract"><a href="#interface-vs-abstract" class="headerlink" title="interface vs abstract"></a>interface vs abstract</h2><ul><li><p>공통점</p><ul><li>선언만 있고 구현 내용이 없습니다.</li><li>스스로 객체를 생성할 수 없지만 추상클래스를 <code>extends</code> 받거나, interface를 <code>implements</code>한 자식들만 객체를 생성할 수 있습니다.</li></ul></li><li><p><code>interface(인터페이스)</code></p><ul><li>다중 상속 가능</li><li>추상 메서드, 상수만 선언 가능(java8부터 default메서드 사용 가능)</li><li>생성자, 일반 변수를 가질 수 없음</li><li>서로 관련성이 없는 클래스들이 인터페이스를 구현하게 되는 경우</li><li>특정 데이터 타입의 행동을 명시하고 싶은데, 어디서 구현되든지 상관없을 때</li><li>다중상속을 허용하고 싶을 때</li></ul></li><li><p><code>abstract(추상 클래스)</code></p><ul><li>다중 상속 불가</li><li>추상 메서드 1개 이상, 일반 변수, 일반 메서드 선언 가능</li><li>생성자, 일반 변수 가질 수 있음</li><li>관련성이 높은 클래스간에 코드를 공유하고 싶은 경우</li><li>상속받은 클래스들이 공통적으로 가지는 메서드와 필드가 많거나, public 이외의 접근제어자 사용이 필요한 경우 사용할 수 있습니다.</li></ul></li></ul><h2 id="자바-메모리-구조"><a href="#자바-메모리-구조" class="headerlink" title="자바 메모리 구조"></a>자바 메모리 구조</h2><ul><li>메서드(Method) 영역<br>클래스 변수의 이름, 타입, 접근 제어자 등과 같은 <code>클래스와 관련된 정보를 저장</code>하며 static 변수, 전역변수 등이 저장된다.<br>코드에서 사용되는 클래스들을 로더가 읽고 클래스 별로 분류해서 저장합니다.</li><li>스택(Stack) 영역<br><code>메서드가 실행되면</code> 스택 영역에 메소드에 대한 영역이 1개 생기며 여기에 지역변수, 매개변수, 리턴값 등이 저장된다. LIFO(Last In First Out) 방식의 메모리입니다.</li><li>힙(Heap) 영역<br>new 연산자를 통해 생성된 객체와 배열의 인스턴스를 저장되고, 메모리는 가비지 컬렉터에 의해 관리됩니다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/interview/">interview</category>
      
      
      <category domain="https://yoo0926.github.io/tags/interview/">interview</category>
      
      
      <comments>https://yoo0926.github.io/2021/08/21/interview/technical-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 약수의 개수와 덧셈</title>
      <link>https://yoo0926.github.io/2021/06/10/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%95%BD%EC%88%98%EC%9D%98-%EA%B0%9C%EC%88%98%EC%99%80-%EB%8D%A7%EC%85%88/</link>
      <guid>https://yoo0926.github.io/2021/06/10/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%95%BD%EC%88%98%EC%9D%98-%EA%B0%9C%EC%88%98%EC%99%80-%EB%8D%A7%EC%85%88/</guid>
      <pubDate>Thu, 10 Jun 2021 09:39:40 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;🔗-출처&quot;&gt;&lt;a href=&quot;#🔗-출처&quot; class=&quot;headerlink&quot; title=&quot;🔗 출처&quot;&gt;&lt;/a&gt;🔗 출처&lt;/h3&gt;&lt;p&gt;약수의 개수와 덧셈 : &lt;a href=&quot;https://programmers.co.kr/learn/cour</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="🔗-출처"><a href="#🔗-출처" class="headerlink" title="🔗 출처"></a>🔗 출처</h3><p>약수의 개수와 덧셈 : <a href="https://programmers.co.kr/learn/courses/30/lessons/77884">https://programmers.co.kr/learn/courses/30/lessons/77884</a></p><h2 id="📔-문제설명"><a href="#📔-문제설명" class="headerlink" title="📔 문제설명"></a>📔 문제설명</h2><p>두 정수 <code>left</code>와 <code>right</code>가 매개변수로 주어집니다. <code>left</code>부터 <code>right</code>까지의 모든 수들 중에서, 약수의 개수가 짝수인 수는 더하고, 약수의 개수가 홀수인 수는 뺀 수를 return 하도록 solution 함수를 완성해주세요.</p><h2 id="✅-제한사항"><a href="#✅-제한사항" class="headerlink" title="✅ 제한사항"></a>✅ 제한사항</h2><blockquote><p>1 ≤ left ≤ right ≤ 1,000</p></blockquote><h2 id="🔍-입출력-예"><a href="#🔍-입출력-예" class="headerlink" title="🔍 입출력 예"></a>🔍 입출력 예</h2><table><thead><tr><th>left</th><th>right</th><th>result</th></tr></thead><tbody><tr><td>13</td><td>17</td><td>43</td></tr><tr><td>24</td><td>27</td><td>52</td></tr></tbody></table><h2 id="📝-풀이"><a href="#📝-풀이" class="headerlink" title="📝 풀이"></a>📝 풀이</h2><p>어떤 자연수의 약수를 구하는 가장 쉬운 방법은 자연수 N을 <code>i = 1 ~ N</code> 까지 나눠서 나머지가 0으로 나오는 i의 개수를 찾으면 된다.</p><p>이러한 경우 최소값 1 ~ 자기자신 N까지 확인하므로 <code>시간복잡도는 O(n)</code> 이 나온다.</p><h3 id="더-빠르게"><a href="#더-빠르게" class="headerlink" title="더 빠르게"></a><em>더 빠르게</em></h3><p>여기서 약수의 특성에 대해서 조금 더 생각해 본다면 항상 약수는 그 짝이 되는 수가 존재한다. (ex. 15 = 3 * 5)</p><p>즉, N의 약수들 중 두 약수의 곱이 N이 되는 약수 a,b는 반드시 존재하므로 N의 제곱근까지 약수를 구하면 그 짝이 되는 약수는 자동으로 구했다고 볼 수 있다.</p><p>이 방법을 사용하여 약수를 구하면 <code>시간복잡도는 O(n^(1/2))</code> 이 나온다.</p><script src="https://gist.github.com/yoo0926/89b73775bb6cf38cb7c355f505c7b30a.js"></script><h3 id="➕-추가"><a href="#➕-추가" class="headerlink" title="➕ 추가"></a>➕ 추가</h3><p>프로그래머스에서 올린 해설을 찾아보니 애초에 문제에서 요구하는건 모든 약수를 구하는게 아니라 <em>약수의 개수가 짝수인건 더하고 홀수인건 빼는 것</em>이라서 약수가 홀수인지 짝수인지만 구하면 된다.</p><p>약수를 구해보면 약수가 홀수라면 그 수는 약수의 제곱수로 나오므로 매개변수 left ~ right 의 제곱수만 구하면 문제를 풀 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/categories/algorithm/programmers/">programmers</category>
      
      
      <category domain="https://yoo0926.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/tags/programmers/">programmers</category>
      
      <category domain="https://yoo0926.github.io/tags/java/">java</category>
      
      <category domain="https://yoo0926.github.io/tags/%EC%9B%94%EA%B0%84%EC%BD%94%EB%93%9C%EC%B1%8C%EB%A6%B0%EC%A7%80/">월간코드챌린지</category>
      
      
      <comments>https://yoo0926.github.io/2021/06/10/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%95%BD%EC%88%98%EC%9D%98-%EA%B0%9C%EC%88%98%EC%99%80-%EB%8D%A7%EC%85%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 신규 아이디 추천</title>
      <link>https://yoo0926.github.io/2021/05/09/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%B6%94%EC%B2%9C/</link>
      <guid>https://yoo0926.github.io/2021/05/09/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%B6%94%EC%B2%9C/</guid>
      <pubDate>Sun, 09 May 2021 05:11:19 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;🔗-출처&quot;&gt;&lt;a href=&quot;#🔗-출처&quot; class=&quot;headerlink&quot; title=&quot;🔗 출처&quot;&gt;&lt;/a&gt;🔗 출처&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;신규 아이디 추천 : &lt;a href=&quot;https://programmers.co.k</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="🔗-출처"><a href="#🔗-출처" class="headerlink" title="🔗 출처"></a>🔗 출처</h3><blockquote><p>신규 아이디 추천 : <a href="https://programmers.co.kr/learn/courses/30/lessons/72410">https://programmers.co.kr/learn/courses/30/lessons/72410</a></p></blockquote><h2 id="📔-문제-설명"><a href="#📔-문제-설명" class="headerlink" title="📔 문제 설명"></a>📔 문제 설명</h2><p>카카오에 입사한 신입 개발자 네오는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.<br>다음은 카카오 아이디의 규칙입니다.</p><p>아이디의 길이는 3자 이상 15자 이하여야 합니다.<br>아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.<br>단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.<br>“네오”는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.<br>신규 유저가 입력한 아이디가 new_id 라고 한다면,</p><blockquote><p>1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.<br>2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.<br>3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.<br>4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.<br>5단계 new_id가 빈 문자열이라면, new_id에 “a”를 대입합니다.<br>6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.<br>    만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.<br>7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.</p></blockquote><p>신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, “네오”가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.</p><h2 id="✅-제한사항"><a href="#✅-제한사항" class="headerlink" title="✅ 제한사항"></a>✅ 제한사항</h2><blockquote><p>new_id는 길이 1 이상 1,000 이하인 문자열입니다.<br>new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.<br>new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&amp;*()=+[{]}:?,&lt;&gt;/ 로 한정됩니다.</p></blockquote><h2 id="🔍-입출력-예"><a href="#🔍-입출력-예" class="headerlink" title="🔍 입출력 예"></a>🔍 입출력 예</h2><table style="width:100%">  <thead style="background-color:#a1a1a1">    <tr>      <th style="color:white">no</th>      <th style="color:white">new_id</th>      <th style="color:white">result</th>    </tr>  </thead>  <tbody>    <tr>      <td>예1</td>      <td>"...!@BaT#*..y.abcdefghijklm"</td>      <td>"bat.y.abcdefghi"</td>    </tr>    <tr>      <td>예2</td>      <td>"z-+.^."</td>      <td>"z--"</td>    </tr>    <tr>      <td>예3</td>      <td>"=.="</td>      <td>"aaa"</td>    </tr>    <tr>      <td>예4</td>      <td>"123_.def"</td>      <td>"123_.def"</td>    </tr>    <tr>      <td>예4</td>      <td>"abcdefghijklmn.p"</td>      <td>"abcdefghijklmn"</td>    </tr>  </tbody></table><h2 id="📝-풀이"><a href="#📝-풀이" class="headerlink" title="📝 풀이"></a>📝 풀이</h2><p>정규식을 사용하면 어렵지 않게 풀 수있는데 정규식을 자주 쓰진 않아서 자세한 규칙들은 블로그를 검색해보고 정규식 검증은 <a href="https://regexr.com/">https://regexr.com</a>에서 진행했다.</p><script src="https://gist.github.com/yoo0926/9131c666c3fcd1d601b1fc92f291a8b0.js"></script>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/categories/algorithm/programmers/">programmers</category>
      
      
      <category domain="https://yoo0926.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/tags/programmers/">programmers</category>
      
      <category domain="https://yoo0926.github.io/tags/java/">java</category>
      
      <category domain="https://yoo0926.github.io/tags/kakao/">kakao</category>
      
      
      <comments>https://yoo0926.github.io/2021/05/09/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%B6%94%EC%B2%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>5.중간메모</title>
      <link>https://yoo0926.github.io/2021/04/25/book/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/5/</link>
      <guid>https://yoo0926.github.io/2021/04/25/book/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/5/</guid>
      <pubDate>Sun, 25 Apr 2021 09:08:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;복습 겸 다시 프로젝트 생성해서 만들어보다가 몇가지 간략히 정리&lt;/p&gt;
&lt;h2 id=&quot;1-springboot에서-html파일을-templates에서-읽도록-하기&quot;&gt;&lt;a href=&quot;#1-springboot에서-html파일을-templates에서-읽</description>
        
      
      
      
      <content:encoded><![CDATA[<p>복습 겸 다시 프로젝트 생성해서 만들어보다가 몇가지 간략히 정리</p><h2 id="1-springboot에서-html파일을-templates에서-읽도록-하기"><a href="#1-springboot에서-html파일을-templates에서-읽도록-하기" class="headerlink" title="1. springboot에서 html파일을 templates에서 읽도록 하기"></a>1. springboot에서 html파일을 templates에서 읽도록 하기</h2><p>템플릿 엔진과 관련된 의존성을 추가하면 자동으로 <code>/recourses/templates</code> 아래에서 템플릿 파일을 찾도록 하는거 같은데 원래 기본 경로는 <code>/recourses/static</code> 이다.</p><p>따라서 별다른 설정을 하지 않고 html 파일을 templates 폴더 밑에 놓고 찾으려고 하면 당연히 404 에러를 볼수 밖에 없다.</p><p>html 파일을 templates 아래에 관리하고 싶다면 몇가지 작업을 해야하는데</p><p>우선 스프링부트에서 WebMVC 설정을 유지하면서 기능을 확장하기 위해 <code>WebMvcConfigurer</code>를 <code>implements</code> 하고 <code>addResourceHandlers</code> 를 오버라이드하여 아래와 같이 작성한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/templates/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">10</span>, TimeUnit.MINUTES));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-application-properties-gt-application-yml-변환"><a href="#2-application-properties-gt-application-yml-변환" class="headerlink" title="2. application.properties -&gt; application.yml 변환"></a>2. application.properties -&gt; application.yml 변환</h2><p>가독성 측면에서 yaml 파일이 더 좋아보여서 기존 내용을 변환해서 쓰려다보니 naver oauth2 설정을 하면 오류가 발생한다.</p><p><code>redirect-uri: &#39;&#123;baseUrl&#125;/&#123;action&#125;/oauth2/code/&#123;registrationId&#125;&#39;</code></p><p>yaml 에서는 / (슬러시)를 그대로 쓰면 파싱 에러가 난다. 따옴표나 작은 따옴표로 감싸주면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/">스프링부트와 AWS로 혼자 구현하는 웹서비스</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/04/25/book/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JWT 개요 간단 정리</title>
      <link>https://yoo0926.github.io/2021/04/23/web/jwt-1/</link>
      <guid>https://yoo0926.github.io/2021/04/23/web/jwt-1/</guid>
      <pubDate>Thu, 22 Apr 2021 15:07:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-JWT-Json-Web-Token-란&quot;&gt;&lt;a href=&quot;#1-JWT-Json-Web-Token-란&quot; class=&quot;headerlink&quot; title=&quot;1. JWT(Json Web Token)란&quot;&gt;&lt;/a&gt;1. JWT(Json Web Tok</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-JWT-Json-Web-Token-란"><a href="#1-JWT-Json-Web-Token-란" class="headerlink" title="1. JWT(Json Web Token)란"></a>1. JWT(Json Web Token)란</h1><p>JSON 객체를 사용해서 토큰 자체에 정보들을 저장하고 있는 Web Token 으로 가벼운 인증으로 사용이 쉽다. 일반적으로 클라이언트와 서버, 서비스와 서비스 사이 통신을 할 때 권한 인가(Authorization)을 위해서 사용된다.</p><h1 id="2-구조"><a href="#2-구조" class="headerlink" title="2. 구조"></a>2. 구조</h1><ul><li>Header : Signature를 해싱하기 위한 알고리즘 정보</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span> : <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span> : <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Payload : 서버와 클라이언트가 주고받는, 시스템에서 실제로 사용될 정보에 대한 내용들</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;jy&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span> : <span class="number">1422779638</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Signature : 토큰의 유효성 검증을 위한 문자열로 헤더와 페이로드를 합친 문자열을 서명한 값이다. 헤더의 alg에 정의된 알고리즘과 secret을 이용해 해싱하고 이 값을 다시 base64 인코딩하여 생성한다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMAC-SHA256(</span><br><span class="line"> secret,</span><br><span class="line"> base64urlEncoding(header) + &#x27;.&#x27; +</span><br><span class="line"> base64urlEncoding(payload)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>이 세 부분은 각각 Base64 인코딩을 사용하여 점을 사용해서 연결되면 JWT가 완성되며 주로 HTTP 통신 시 <code>Authorization</code> key의 value 로 사용된다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                            <span class="comment">//Header                             Payload                                  Signature</span></span><br><span class="line">  <span class="attr">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiankiLCJpYXQiOjE0MjI3Nzk2Mzh9.SNKm-Pcut8DUMBmeQXdIJlM_wFkh4jYd5YtRT369JdI&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-장점과-단점"><a href="#3-장점과-단점" class="headerlink" title="3. 장점과 단점"></a>3. 장점과 단점</h1><ul><li><p>장점</p><ul><li>중앙의 인증서버, 데이터 스토어에 대한 의존성이 없어서 시스템의 수평확장에 유리하다.</li><li>Base64 URL Safe Encoding을 사용하여 URL, Cookie, Header 어디에서든 모두 사용 가능하다.</li></ul></li><li><p>단점</p><ul><li>Payload의 정보가 많아지면 네트워크 사용량이 증가하여 데이터 설계 고려 필요</li><li>토큰이 클라이언트에 저장되서 서버에서 클라이언트의 토큰을 조작할 수 없다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/web/">web</category>
      
      
      <category domain="https://yoo0926.github.io/tags/JWT/">JWT</category>
      
      <category domain="https://yoo0926.github.io/tags/web/">web</category>
      
      
      <comments>https://yoo0926.github.io/2021/04/23/web/jwt-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>4.머스테치로 화면 구성하기</title>
      <link>https://yoo0926.github.io/2021/04/22/book/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/4/</link>
      <guid>https://yoo0926.github.io/2021/04/22/book/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/4/</guid>
      <pubDate>Thu, 22 Apr 2021 09:08:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;4-머스테치로-화면-구성하기&quot;&gt;&lt;a href=&quot;#4-머스테치로-화면-구성하기&quot; class=&quot;headerlink&quot; title=&quot;4. 머스테치로 화면 구성하기&quot;&gt;&lt;/a&gt;4. 머스테치로 화면 구성하기&lt;/h1&gt;&lt;h2 id=&quot;4-1-서버-템플릿-</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="4-머스테치로-화면-구성하기"><a href="#4-머스테치로-화면-구성하기" class="headerlink" title="4. 머스테치로 화면 구성하기"></a>4. 머스테치로 화면 구성하기</h1><h2 id="4-1-서버-템플릿-엔진"><a href="#4-1-서버-템플릿-엔진" class="headerlink" title="4.1 서버 템플릿 엔진"></a>4.1 서버 템플릿 엔진</h2><p>템플릿 엔진이란, <strong>지정된 템플릿 양식과 데이터</strong>가 합쳐져 HTML문서를 출력하는 소프트웨어를 이야기한다.</p><p>서버 템플릿 엔진을 이용한 화면 생성은 서버에서 Java 코드로 문자열을 만든 뒤 이 문자열을 HTML로 변환하여 브라우저로 전달한다.</p><p>반면 클라이언트 템플릿 엔진(Vue, React 등)을 이용한 SPA(Single Page Application)은 브라우저에서 화면을 생성한다. 즉, 서버에서 이미 코드가 벗어난 경우라서</p><p>서버에서는 Json 혹은 Xml 형식의 데이터만 전달하고 클라이언트에서 조립한다.</p><p>최근엔 리액트나 뷰와 같은 자바스크립트 프레임워크에서 서버사이드렌더링을 지원하는 모습을 볼 수 있지만 그건 나중에 생각하자.</p><hr><h3 id="머스테치"><a href="#머스테치" class="headerlink" title="머스테치"></a>머스테치</h3><p>머스테치는 많은 언어를 지원하는 심플한 템플릿 엔진이다.</p><p>스프링 부트에서 공식 지원하는 템플릿 엔진으로 gradle에 의존성 한줄 추가하면 바로 사용할 수 있다.</p><p>파일위치는 기본적으로 <code>src/main/resources/templates</code>이며 이 위치에 머스테치 파일을 두면 스프링 부트에서 자동으로 로딩한다.</p><p>해당 위치에 index.mustache를 생성한 후 이 머스테치에 URL을 매핑하는데 이는 Controller에서 진행한다.</p><ul><li>IndexController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>머스테치 스타터 의존성을 추가했기 때문에 컨트롤러에서 문자열을 반환할 때 <strong>앞의 경로와 뒤의 파일 확장자는 자동으로 지정</strong>된다.</p><p>즉, 여기선 “index”를 반환하므로 <code>src/main/resources/templates/index.mustache</code>로 전환되어 <strong>View Resolver</strong>가 처리하게 된다.</p><p>(View Resolver는 URL 요청의 결과를 전달할 타입과 값을 지정하는 관리자 격으로 볼 수 있다.)</p><hr><p>화면 구성 시 bootstrap을 사용하는데 공통된 부분에 대해선 layout을 따로 둬서 header와 footer 파일을 각각 만들어서 공통된 코드는 해당 위치에 생성한다.</p><p>여기서 <strong>페이지 로딩속도를 높이기 위해</strong> css는 header에, js는 footer에 두는데 HTML은 위에서부터 코드가 실행되기 때문에 head가 다 실행되고서야 body가 실행된다.</p><p>즉, head가 다 불러지지 않으면 사용자 쪽에선 백지 화면만 노출되며 특히 js의 용량이 크면 클수록 body 부분의 실행이 늦어지기 때문에 js는 body 하단에 두어 화면이 다 그려진 뒤에 호출하는 것이 좋다.</p><p>header와 footer를 index에 추가하는건 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&gt;layout/header&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>스프링 부트로 시작하는 웹 서비스<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/posts/save&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">clas</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>글 등록<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;&gt;layout/footer&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>&#123;&#123;> &#125;&#125;</code> 는 현재 머스테치 파일을 기준으로 다른 파일을 가져온다.</p><p>화면의 버튼에 API를 호출하는 js파일을 작성하여 footer.mustache에 추가한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--index.js 추가--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/app/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js 호출 코드는 절대경로(/)로 바로 시작하는데 스프링 부트는 기본적으로 <code>src/main/resources/static</code>에 위치한 자바스크립트, CSS, 이미지 등 정적 파일들은 URL에서 / 로 설정된다.</p><hr><ul><li>PostsRepository 인터페이스</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PostsRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Posts</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT p FROM Posts p ORDER BY p.id DESC&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Posts&gt; <span class="title">findAllDesc</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Query 어노테이션을 사용하면 SpringDataJpa에서 제공하지 않는 메소드를 쿼리로 직접 작성할 수 있다.</p><p>보통 규모가 있는 프로젝트에선 데이터 조회는 FK의 조인, 복잡한 조건 등으로 인해 Entity 클래스만으로 처리가 어려워 조회용 프레임워크를 추가로 사용한다.</p><p>대표적 예로 <code>querydsl</code>, jooq, MyBatis 등이 있는데 해당 프레임워크 중 하나로 조회를 하고 그 외 등록/수정/삭제 등은 SpringDataJpa를 통해 진행한다.</p><ul><li>PostsService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;PostsListResponseDto&gt; <span class="title">findAllDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postsRepository.findAllDesc().stream().map(PostsListResponseDto::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>@Transactional 어노테이션에 추가된 readOnly 옵션을 true로 주면 <strong>트랜잭션 범위는 유지</strong>하되, 조회기능만 남겨두어 조회 속도가 개선되기 때문에 등록, 수정, 삭제 기능이 전혀 없는 서비스 메소드에서 사용하는 것을 추천한다.</p><hr><ul><li>IndexController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PostsService postsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;posts&quot;</span>, postsService.findAllDesc());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Model</p><ul><li>서버 템플릿 엔진에서 사용할 수 있는 객체를 저장할 수 있다.</li><li>여기서는 postsService.findAllDesc()로 가져온 결과를 posts로 index.mustache에 전달한다.</li></ul><hr><p>REST에서 CURD는 다음과 같이 HTTP Method에 매핑된다.</p><ul><li>생성(Create) : POST</li><li>읽기(Read) : GET</li><li>수정(Update) : PUT</li><li>삭제(Delete) : DELETE</li></ul>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/book/">book</category>
      
      <category domain="https://yoo0926.github.io/categories/book/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/">스프링부트와 AWS로 혼자 구현하는 웹서비스</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      <category domain="https://yoo0926.github.io/tags/book/">book</category>
      
      
      <comments>https://yoo0926.github.io/2021/04/22/book/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/4/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
