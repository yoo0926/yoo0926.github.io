<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>하루하루 끄적끄적</title>
    <link>https://yoo0926.github.io/</link>
    
    <atom:link href="https://yoo0926.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>티끌모아 태산이라 티끌부터 모아본다.</description>
    <pubDate>Sun, 21 Nov 2021 08:56:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>유클리드 호제법</title>
      <link>https://yoo0926.github.io/2021/09/02/algo/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/</link>
      <guid>https://yoo0926.github.io/2021/09/02/algo/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/</guid>
      <pubDate>Thu, 02 Sep 2021 06:55:17 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;유클리드 호제법(Euclidean algorithm)은 최대공약수, 최소공배수를 구하는 가장 대중적인 알고리즘으로&lt;/p&gt;
&lt;p&gt;호제법이란 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘을 말한다.&lt;/p&gt;
&lt;blockquote&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>유클리드 호제법(Euclidean algorithm)은 최대공약수, 최소공배수를 구하는 가장 대중적인 알고리즘으로</p><p>호제법이란 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘을 말한다.</p><blockquote><p>2개의 자연수 a,b에 대해서 a를 b로 나눈 나머지를 r이라고 한다면 (단, a&gt;b)<br>a와 b의 최대공야수는 b와 r의 최대공약수와 같다.</p><p>이 성질에 따라, b를 r로 나눈 나머지 r’를 구하고, 다시 r을 r’로 나눈 나머지를 구하는 과정을 반복하여 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수이다.</p></blockquote><p>이해하기 쉽게 예를 들어 108과 78의 최대공약수를 구해보면 아래와 같은 연산을 할 수 있다.</p><blockquote><p>108 % 78 = 30 // 큰수를 작은수로 나누고 나머지를 구하기<br>78 % 30 = 18 // 위에서 나눈수(78)를 가져와 위의 나머지로 다시 나눠서 나머지 구하기<br>30 % 18 = 12 // 반복<br>18 % 12 = 6<br>12 % 6 = 0 // 나머지가 0이 되면 이때 나눈 수가 최대공약수(=6)</p></blockquote><p>그렇다면 최소공배수는 어떻게 구할까?</p><p>최소공배수의 규칙에서 두 수 a,b가 있을 때 <code>a * b = 최대공약수 * 최소공배수</code> 라는 공식이 성립한다.</p><p>따라서 주어진 두수를 곱하고 최대공약수로 나눠준다면 그 수가 최소공배수가 될 것이다.</p><blockquote><p>108 * 78 / 6 = 1404</p></blockquote><p>이를 간단하게 코드로 구현해보면 다음과 같다.</p><script src="https://gist.github.com/yoo0926/253e8a250ea26cb1689edb8f2f58c4ac.js"></script>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/algorithm/">algorithm</category>
      
      
      <category domain="https://yoo0926.github.io/tags/algorithm/">algorithm</category>
      
      
      <comments>https://yoo0926.github.io/2021/09/02/algo/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 약수의 개수와 덧셈</title>
      <link>https://yoo0926.github.io/2021/06/10/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%95%BD%EC%88%98%EC%9D%98-%EA%B0%9C%EC%88%98%EC%99%80-%EB%8D%A7%EC%85%88/</link>
      <guid>https://yoo0926.github.io/2021/06/10/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%95%BD%EC%88%98%EC%9D%98-%EA%B0%9C%EC%88%98%EC%99%80-%EB%8D%A7%EC%85%88/</guid>
      <pubDate>Thu, 10 Jun 2021 09:39:40 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;🔗-출처&quot;&gt;&lt;a href=&quot;#🔗-출처&quot; class=&quot;headerlink&quot; title=&quot;🔗 출처&quot;&gt;&lt;/a&gt;🔗 출처&lt;/h3&gt;&lt;p&gt;약수의 개수와 덧셈 : &lt;a href=&quot;https://programmers.co.kr/learn/cour</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="🔗-출처"><a href="#🔗-출처" class="headerlink" title="🔗 출처"></a>🔗 출처</h3><p>약수의 개수와 덧셈 : <a href="https://programmers.co.kr/learn/courses/30/lessons/77884">https://programmers.co.kr/learn/courses/30/lessons/77884</a></p><h2 id="📔-문제설명"><a href="#📔-문제설명" class="headerlink" title="📔 문제설명"></a>📔 문제설명</h2><p>두 정수 <code>left</code>와 <code>right</code>가 매개변수로 주어집니다. <code>left</code>부터 <code>right</code>까지의 모든 수들 중에서, 약수의 개수가 짝수인 수는 더하고, 약수의 개수가 홀수인 수는 뺀 수를 return 하도록 solution 함수를 완성해주세요.</p><h2 id="✅-제한사항"><a href="#✅-제한사항" class="headerlink" title="✅ 제한사항"></a>✅ 제한사항</h2><blockquote><p>1 ≤ left ≤ right ≤ 1,000</p></blockquote><h2 id="🔍-입출력-예"><a href="#🔍-입출력-예" class="headerlink" title="🔍 입출력 예"></a>🔍 입출력 예</h2><table><thead><tr><th>left</th><th>right</th><th>result</th></tr></thead><tbody><tr><td>13</td><td>17</td><td>43</td></tr><tr><td>24</td><td>27</td><td>52</td></tr></tbody></table><h2 id="📝-풀이"><a href="#📝-풀이" class="headerlink" title="📝 풀이"></a>📝 풀이</h2><p>어떤 자연수의 약수를 구하는 가장 쉬운 방법은 자연수 N을 <code>i = 1 ~ N</code> 까지 나눠서 나머지가 0으로 나오는 i의 개수를 찾으면 된다.</p><p>이러한 경우 최소값 1 ~ 자기자신 N까지 확인하므로 <code>시간복잡도는 O(n)</code> 이 나온다.</p><h3 id="더-빠르게"><a href="#더-빠르게" class="headerlink" title="더 빠르게"></a><em>더 빠르게</em></h3><p>여기서 약수의 특성에 대해서 조금 더 생각해 본다면 항상 약수는 그 짝이 되는 수가 존재한다. (ex. 15 = 3 * 5)</p><p>즉, N의 약수들 중 두 약수의 곱이 N이 되는 약수 a,b는 반드시 존재하므로 N의 제곱근까지 약수를 구하면 그 짝이 되는 약수는 자동으로 구했다고 볼 수 있다.</p><p>이 방법을 사용하여 약수를 구하면 <code>시간복잡도는 O(n^(1/2))</code> 이 나온다.</p><script src="https://gist.github.com/yoo0926/89b73775bb6cf38cb7c355f505c7b30a.js"></script><h3 id="➕-추가"><a href="#➕-추가" class="headerlink" title="➕ 추가"></a>➕ 추가</h3><p>프로그래머스에서 올린 해설을 찾아보니 애초에 문제에서 요구하는건 모든 약수를 구하는게 아니라 <em>약수의 개수가 짝수인건 더하고 홀수인건 빼는 것</em>이라서 약수가 홀수인지 짝수인지만 구하면 된다.</p><p>약수를 구해보면 약수가 홀수라면 그 수는 약수의 제곱수로 나오므로 매개변수 left ~ right 의 제곱수만 구하면 문제를 풀 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/categories/algorithm/programmers/">programmers</category>
      
      
      <category domain="https://yoo0926.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/tags/programmers/">programmers</category>
      
      <category domain="https://yoo0926.github.io/tags/java/">java</category>
      
      <category domain="https://yoo0926.github.io/tags/%EC%9B%94%EA%B0%84%EC%BD%94%EB%93%9C%EC%B1%8C%EB%A6%B0%EC%A7%80/">월간코드챌린지</category>
      
      
      <comments>https://yoo0926.github.io/2021/06/10/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%95%BD%EC%88%98%EC%9D%98-%EA%B0%9C%EC%88%98%EC%99%80-%EB%8D%A7%EC%85%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 신규 아이디 추천</title>
      <link>https://yoo0926.github.io/2021/05/09/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%B6%94%EC%B2%9C/</link>
      <guid>https://yoo0926.github.io/2021/05/09/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%B6%94%EC%B2%9C/</guid>
      <pubDate>Sun, 09 May 2021 05:11:19 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;🔗-출처&quot;&gt;&lt;a href=&quot;#🔗-출처&quot; class=&quot;headerlink&quot; title=&quot;🔗 출처&quot;&gt;&lt;/a&gt;🔗 출처&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;신규 아이디 추천 : &lt;a href=&quot;https://programmers.co.k</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="🔗-출처"><a href="#🔗-출처" class="headerlink" title="🔗 출처"></a>🔗 출처</h3><blockquote><p>신규 아이디 추천 : <a href="https://programmers.co.kr/learn/courses/30/lessons/72410">https://programmers.co.kr/learn/courses/30/lessons/72410</a></p></blockquote><h2 id="📔-문제-설명"><a href="#📔-문제-설명" class="headerlink" title="📔 문제 설명"></a>📔 문제 설명</h2><p>카카오에 입사한 신입 개발자 네오는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.<br>다음은 카카오 아이디의 규칙입니다.</p><p>아이디의 길이는 3자 이상 15자 이하여야 합니다.<br>아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.<br>단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.<br>“네오”는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.<br>신규 유저가 입력한 아이디가 new_id 라고 한다면,</p><blockquote><p>1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.<br>2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.<br>3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.<br>4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.<br>5단계 new_id가 빈 문자열이라면, new_id에 “a”를 대입합니다.<br>6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.<br>    만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.<br>7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.</p></blockquote><p>신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, “네오”가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.</p><h2 id="✅-제한사항"><a href="#✅-제한사항" class="headerlink" title="✅ 제한사항"></a>✅ 제한사항</h2><blockquote><p>new_id는 길이 1 이상 1,000 이하인 문자열입니다.<br>new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.<br>new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&amp;*()=+[{]}:?,&lt;&gt;/ 로 한정됩니다.</p></blockquote><h2 id="🔍-입출력-예"><a href="#🔍-입출력-예" class="headerlink" title="🔍 입출력 예"></a>🔍 입출력 예</h2><table style="width:100%">  <thead style="background-color:#a1a1a1">    <tr>      <th style="color:white">no</th>      <th style="color:white">new_id</th>      <th style="color:white">result</th>    </tr>  </thead>  <tbody>    <tr>      <td>예1</td>      <td>"...!@BaT#*..y.abcdefghijklm"</td>      <td>"bat.y.abcdefghi"</td>    </tr>    <tr>      <td>예2</td>      <td>"z-+.^."</td>      <td>"z--"</td>    </tr>    <tr>      <td>예3</td>      <td>"=.="</td>      <td>"aaa"</td>    </tr>    <tr>      <td>예4</td>      <td>"123_.def"</td>      <td>"123_.def"</td>    </tr>    <tr>      <td>예4</td>      <td>"abcdefghijklmn.p"</td>      <td>"abcdefghijklmn"</td>    </tr>  </tbody></table><h2 id="📝-풀이"><a href="#📝-풀이" class="headerlink" title="📝 풀이"></a>📝 풀이</h2><p>정규식을 사용하면 어렵지 않게 풀 수있는데 정규식을 자주 쓰진 않아서 자세한 규칙들은 블로그를 검색해보고 정규식 검증은 <a href="https://regexr.com/">https://regexr.com</a>에서 진행했다.</p><script src="https://gist.github.com/yoo0926/9131c666c3fcd1d601b1fc92f291a8b0.js"></script>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/categories/algorithm/programmers/">programmers</category>
      
      
      <category domain="https://yoo0926.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://yoo0926.github.io/tags/programmers/">programmers</category>
      
      <category domain="https://yoo0926.github.io/tags/java/">java</category>
      
      <category domain="https://yoo0926.github.io/tags/kakao/">kakao</category>
      
      
      <comments>https://yoo0926.github.io/2021/05/09/algo/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%B6%94%EC%B2%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>함수형 프로그래밍 - 재귀</title>
      <link>https://yoo0926.github.io/2020/12/07/functional/20201207-functional-2/</link>
      <guid>https://yoo0926.github.io/2020/12/07/functional/20201207-functional-2/</guid>
      <pubDate>Sun, 06 Dec 2020 15:13:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;앞서 확인한 개요에서 언급했는데 함수형 프로그래밍에선 반복을 재귀를 통해서 구현한다고 했는데 재귀와 꼬리재귀에 대해서 간단히 알아보자.&lt;/p&gt;
&lt;h2 id=&quot;재귀&quot;&gt;&lt;a href=&quot;#재귀&quot; class=&quot;headerlink&quot; title=&quot;재귀&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>앞서 확인한 개요에서 언급했는데 함수형 프로그래밍에선 반복을 재귀를 통해서 구현한다고 했는데 재귀와 꼬리재귀에 대해서 간단히 알아보자.</p><h2 id="재귀"><a href="#재귀" class="headerlink" title="재귀"></a>재귀</h2><p>함수 본문에서 자기자신을 호출하는 방식을 <code>재귀호출(recursive call)</code>이라고 부른다. 재귀는 다른 명령어가 방지할 때까지 계속된다.</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><script src="https://gist.github.com/yoo0926/c22f935380ac613ff3a33e5970af0ea3.js"></script><hr><h2 id="꼬리-재귀-최적화-in-python"><a href="#꼬리-재귀-최적화-in-python" class="headerlink" title="꼬리 재귀 최적화 in python"></a>꼬리 재귀 최적화 in python</h2><p>재귀호출의 경우 호출 스택의 깊이가 얕은 경우엔 큰 상관이 없으나 깊이가 깊어지면 오버플로우가 발생하는 문제가 있다.<br><em>여담으로 실행하는 <del>시스템에 따라서 조금씩 다를수 있지만</del> 파이썬에서 호출가능한 스택의 최대 깊이는 보통 1000 정도에서 <code>RecursionError</code>가 발생한다.</em></p><script src="https://gist.github.com/yoo0926/9eab6f85efac2999cd3702c3f08716cc.js"></script><p>이를 해결하기 위한 방법으로 제시되는 해결책 중 하나가 꼬리 재귀<code>Tail recursion</code>이다.</p><p>간단히 말하자면 함수에서 마지막으로 호출하는 함수가 자기 자신이고, 재귀 호출의 값을 반환받은후 추가적인 연산이 필요하지 않는 방식을 말한다.</p><hr><h2 id="꼬리-재귀-적용-예제"><a href="#꼬리-재귀-적용-예제" class="headerlink" title="꼬리 재귀 적용 예제"></a>꼬리 재귀 적용 예제</h2><p>위의 예제에서 사용한 팩토리얼 함수를 보자.</p><p>fact(n)을 호출했을 때 연산이 끝나지 않았는데 fact(n-1)을 호출하기 때문에 리턴 주소를 저장하기 위해서 시스템 콜스택을 사용하게 된다.</p><p>즉, 현재 함수(fact(n))에서 결과값을 반환하기 위해서는 현재 함수의 인자 값(n)을 스택에 가지고 있다가 그 다음 호출될 함수(fact(n-1))의 결과 값과 함께 연산을 해야 한다는 점이다.<br>이러한 방식은 꼬리 재귀를 만족하지 못한다고 본다.</p><p>예제를 꼬리 재귀로 바꾸려면 어떻게 해야할까? 재귀를 호출하는 부분에서 추가적인 연산이 필요없도록 만들면 되는데</p><p>이를 구현하기 위해선</p><blockquote><p>return에서는 <em>(언어 스펙에서 지정한 스택에 메모리를 쌓지 않는 연산자를 제외한)</em> 연산자를 사용하면 안된다.</p></blockquote><p>연산자의 사용없이 재귀 호출의 반환값을 그대로 return 해주면 된다.</p><script src="https://gist.github.com/yoo0926/10a170843e290ce85e22acf0d62e374a.js"></script><p>한가지 주의할 점은 개발자가 꼬리재귀 구조로 코드를 짜더라도 사용하는 언어의 스펙에 따라서 꼬리재귀 최적화 보장여부가 다르기 때문에 확인이 필요하다.<br>요즘 python을 공부하고 싶어서 위 예시를 python으로 들었지만 python은 꼬리재귀 최적화를 보장하지 않는데 python의 창시자 <code>귀도 반 로섬</code>의 의견은 다음과 같다.</p><blockquote><p>귀도 반 로섬의 TRE(Tail Recursion Elimination)에 대한 반론</p><ul><li>콜 스택을 추적하기에 부적합하다(디버깅이 어렵다)</li><li>단순 최적화기 때문에 개별 파이썬 컴파일러 구현체에서 선택하게 둘 것</li><li>재귀가 모든 것의 기반이라는 접근은 이상적인 수학적인 접근일 뿐이다</li><li>파이썬 스타일의 개발자들은 재귀 대신 멋진(?) 문법들을 쓸 수 있다</li><li>not PYTHONIC 하다</li></ul></blockquote><hr><p><em><strong>Reference</strong></em></p><p><a href="https://www.tutorialspoint.com/functional_programming/functional_programming_recursion.htm">tutorialspoint - Learn Functional Programming</a></p><p><a href="https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/">재귀,반복, Tail Recursion</a></p><p><a href="http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html">Tail Recursion Elimination</a></p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/functional/">functional</category>
      
      
      <category domain="https://yoo0926.github.io/tags/functional/">functional</category>
      
      
      <comments>https://yoo0926.github.io/2020/12/07/functional/20201207-functional-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>함수형 프로그래밍 - 개요</title>
      <link>https://yoo0926.github.io/2020/12/07/functional/20201207-functional-1/</link>
      <guid>https://yoo0926.github.io/2020/12/07/functional/20201207-functional-1/</guid>
      <pubDate>Sun, 06 Dec 2020 15:02:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;함수형~ 함수형~ 여러 곳에서 이야기는 종종 들었지만 제대로 찾아본 적이 없다보니 기본적인 개념부터 많이 부족해서 간단히 스터디를 시작했다.&lt;/p&gt;
&lt;p&gt;특정 언어를 선정해서 언어적 특성에 종속되기 보단 우선 함수형 프로그래밍의 패러다임에 대해서</description>
        
      
      
      
      <content:encoded><![CDATA[<p>함수형~ 함수형~ 여러 곳에서 이야기는 종종 들었지만 제대로 찾아본 적이 없다보니 기본적인 개념부터 많이 부족해서 간단히 스터디를 시작했다.</p><p>특정 언어를 선정해서 언어적 특성에 종속되기 보단 우선 함수형 프로그래밍의 패러다임에 대해서 먼저 학습 해보자.</p><hr><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>함수형 프로그래밍은 크게 두 그룹으로 분류된다.</p><table><thead><tr><th>구분</th><th>지원범위</th><th>언어</th></tr></thead><tbody><tr><td>순수 함수형 언어</td><td>오직 함수형 패러다임만 지원</td><td>Haskell</td></tr><tr><td>불순 함수형 언어</td><td>함수형 패러다임과 명령형 프로그래밍을 지원</td><td>LISP</td></tr></tbody></table><p>그럼 여기서 명령형은 뭐고 함수형 패러다임은 뭘 말하는 걸까?</p><p>프로그래밍 패러다임은 크게 보면 2가지로 분류할 수 있다.</p><ol><li>명령형 프로그래밍 : 프로그래밍의 상태와 상태를 변경시키는 구문의 관점에서 연산을 설명하여 기능을 구현하기 위한 알고리즘을 명시하지만 결국 무엇을 해야하는지는 명시하지 않는다.<ul><li>절차지향 프로그래밍 : 수행되어야 할 연속적인 계산 과정을 포함 (C, C++)</li><li>객체지향 프로그래밍 : 객체들의 집합으로 프로그램의 상호작용을 표현 (C++, Java, C#)</li></ul></li><li>선언형 프로그래밍 : How(어떻게) 보단 What(무엇을) 해야하는지 설명하는 방식으로 알고리즘에 대해서 명시하진 않고 목표를 명시한다.<ul><li>함수형 프로그래밍 : 순수 함수를 조합하고 소프트웨어를 만드는 방식 (Clojure, Haskell, LISP)</li></ul></li></ol><p><em><strong>명령형 프로그래밍은 어떻게 할 것이가(How)를 표현하고, 선언형 프로그래밍은 무엇을 할것인가(What)를 표현한다.</strong></em></p><hr><h2 id="특성"><a href="#특성" class="headerlink" title="특성"></a>특성</h2><p>함수형 프로그래밍은 아래와 같은 특징을 같는다.</p><ul><li><p>계산을 수행하기 위해 조건식과 재귀를 사용하는 수학 함수의 개념에 따라 설계되었다.</p></li><li><p>고차함수<code>high order function</code>와 지연연산<code>lazy evaluation</code> 기능을 지원한다.</p><ol><li><h4 id="고차-함수"><a href="#고차-함수" class="headerlink" title="고차 함수"></a>고차 함수</h4><ul><li>람다 계산법에서 만들어진 용어로 아래 조건을 만족하는 함수<ul><li>함수에 함수를 파라미터로 전달할 수 있다.</li><li>함수의 반환값으로 함수를 사용할 수 있다.</li></ul></li><li>고차 함수는 <code>1급 함수</code>의 부분집합이다.</li></ul></li><li><h4 id="지연-연산"><a href="#지연-연산" class="headerlink" title="지연 연산"></a>지연 연산</h4><ul><li>불필요한 연산을 피하기 위해서 결과값이 필요한 시점까지 연산을 늦추는 것을 말한다.<ul><li>값을 미리 계산해서 저장하지 않기 때문에 메모리의 효율적인 사용이 가능</li></ul></li></ul></li></ol></li><li><p>루프문과 같은 흐름제어와 If-Else, Switch문과 같은 조건문을 지원하지 않고 함수와 함수호출을 직접 사용한다.</p></li><li><p>OOP와 마찬가지로 추상화, 캡슐화, 상속, 다형성과 같은 개념을 지원한다.</p></li></ul><hr><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ul><li><strong>Bugs-Free Code</strong> : State를 지원하지 않으므로 부작용이 없어서<code>no side-effect</code> 오류없는 코드작성이 가능하다.<del>(없다기 보단 그냥 적은게 맞을 것 같다.)</del></li><li><strong>효율적인 병렬 프로그래밍</strong> : 상태 변경이 없기 때문에 병렬로 작동하도록 기능에 대해서 프로그래밍할 수 있으며 이는 재사용 및 테스트를 더 쉽게 지원한다.</li><li><strong>효율성</strong> : 독립적인 유닛으로 구성되서 동시에 실행할 수 있다.</li><li><strong>중첩 함수 지원</strong> : 중첩함수를 지원한다.</li><li><strong>지연 연산</strong> : <code>Lazy List</code>, <code>Lazy Map</code> 등과 같은 지연 함수 구조를 지원한다.</li></ul><hr><h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ul><li>큰 메모리 공간이 필요하며 상태가 없기 때문에 작업을 수행할 때마다 새 객체를 만들어야한다.</li></ul><hr><h2 id="함수형-vs-객체지향"><a href="#함수형-vs-객체지향" class="headerlink" title="함수형 vs 객체지향"></a>함수형 vs 객체지향</h2><table><thead><tr><th>함수형</th><th>OOP</th></tr></thead><tbody><tr><td>불변 데이터 사용</td><td>가변 데이터 사용</td></tr><tr><td>선언적 프로그래밍 모델</td><td>명령형 프로그래밍 모델</td></tr><tr><td><code>무엇을 하는가</code>에 초점</td><td><code>어떻게 하는가</code> 에 초점</td></tr><tr><td>병렬 프로그래밍 지원</td><td>병렬 프로그래밍에 적합하지 않음</td></tr><tr><td>부작용이 없다</td><td>부작용이 발생할 수 있다.</td></tr><tr><td>함수 호출 및 재귀를 사용하여 흐름 제어</td><td>루프와 조건문을 사용하서 흐름 제어</td></tr><tr><td>재귀를 사용한 반복</td><td>루프를 사용한 반복</td></tr><tr><td>실행순서가 중요하지 않다.</td><td>실행 순서가 매우 중요하다.</td></tr><tr><td>데이터 추상화, 동작 추상화 지원</td><td>데이터 추상화만 지원</td></tr></tbody></table><p>이상으로 함수형 프로그래밍에 대한 대략적인 개요에 대해서만 우선 정리해 보았다.</p><hr><p><em><strong>Reference</strong></em></p><p><a href="https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm">tutorialspoint - Lean Functional Programming</a></p><p><a href="https://velog.io/@kyusung/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9A%94%EC%95%BD">함수형 프로그래밍 요약</a></p><p><a href="https://engineering.linecorp.com/ko/blog/functional-programing-language-and-line-game-cloud/">함수형 프로그래밍 언어에 대한 고찰</a></p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/functional/">functional</category>
      
      
      <category domain="https://yoo0926.github.io/tags/functional/">functional</category>
      
      
      <comments>https://yoo0926.github.io/2020/12/07/functional/20201207-functional-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PostgreSQL 테이블 중복데이터 제거</title>
      <link>https://yoo0926.github.io/2020/11/23/sql/postgresql/%EC%A4%91%EB%B3%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%9C%EA%B1%B0/</link>
      <guid>https://yoo0926.github.io/2020/11/23/sql/postgresql/%EC%A4%91%EB%B3%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%9C%EA%B1%B0/</guid>
      <pubDate>Sun, 22 Nov 2020 15:40:41 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;설계, 운영이 잘 되는 DB에선 많이 발생하는 문제는 아닐테지만 테이블의 특정 컬럼값을 기준으로 중복된 데이터를 삭제해야 하는 경우가 있다.&lt;/p&gt;
&lt;p&gt;필자의 경우 PostgreSQL을 사용하던 중 이전 담당자가 테이블을 TEST_01_TB ~</description>
        
      
      
      
      <content:encoded><![CDATA[<p>설계, 운영이 잘 되는 DB에선 많이 발생하는 문제는 아닐테지만 테이블의 특정 컬럼값을 기준으로 중복된 데이터를 삭제해야 하는 경우가 있다.</p><p>필자의 경우 PostgreSQL을 사용하던 중 이전 담당자가 테이블을 TEST_01_TB ~ TEST_10_TB 이런식으로 물리적으로 10개로 나눠서 설계하여 사용하던걸 인수받았는데 감리 검수에서 10개의 테이블을 하나로 합치라는 개선안내를 받았다.</p><p><code>Hash Partition</code>을 적용하여 테이블을 합쳤으나 파티션을 적용하니 기존에 복합키로 사용하던 <code>Unique</code> 조건이나 데이터를 생성 시 Insert쿼리문에서 <code>ON CONFLICT 컬럼 DO NOTHING</code> 옵션도 적용할 수 없어서 빠지게 되었는데 이 때문에 중복데이터가 발생하였다.</p><p>중복된 데이터를 어떻게 찾아서 지우느냐에 따라 수행시간에 큰 차이가 날거라고 생각해서 구글링을 해보니 몇가지 방법을 찾을 수 있었다.</p><p><em><strong>Test Table Schema</strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MEMBER_TB (</span><br><span class="line">MEM_ID BIGSERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">MEM_NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    MEM_PNUM <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    MEM_EMAIL TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BLACKLIST_TB (</span><br><span class="line">    MEM_PNUM <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><em><strong>ROW_NUMBER()</strong></em></p><p>유저 테이블에의 MEM_PNUM 컬럼을 기준으로 중복된 데이터가 있어서 이를 지우기 위해선 어떻게 해야할까? 구글링을 하고 제일먼저 찾은 방법은 <code>ROW_NUMBER()</code> 를 활용한 방법이었다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> MEMBER_TB</span><br><span class="line"><span class="keyword">WHERE</span> MEM_ID <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> MEM_ID </span><br><span class="line">                 <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> MEM_ID,</span><br><span class="line">                       <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> MEM_PNUM <span class="keyword">ORDER</span> <span class="keyword">BY</span> MEM_ID ) RNUM</span><br><span class="line">                       <span class="keyword">FROM</span> MEMBER_TB )</span><br><span class="line">                <span class="keyword">WHERE</span> RNUM <span class="operator">&gt;</span> <span class="number">1</span> </span><br><span class="line">             );</span><br></pre></td></tr></table></figure><p>바로 적용할까 싶었지만 타겟 테이블의 데이터건수는 수십억개라 좀 더 빠른 방법이 없는지 더 찾아보던 중 <code>Self Join</code>과 <code>Delete Using</code>을 활용한 방법을 찾을 수 있었다.</p><p><em><strong>DELETE USING</strong></em></p><p>특정 테이블을 참조하여 데이터를 삭제할 때 <code>PostgreSQL</code>의 경우 <code>MySQL</code>처럼 <code>DELETE JOIN</code>을 제공하진 않지만 <code>USING</code>을 사용하여 <code>DELETE JOIN</code>과 유사한 기능을 지원한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> MEMBER_TB T1</span><br><span class="line"><span class="keyword">USING</span> BLACKLIST_TB T2</span><br><span class="line"><span class="keyword">WHERE</span> T1.MEM_PNUM <span class="operator">=</span> T2.MEM_PNUM;</span><br></pre></td></tr></table></figure><p>예를 들면 이 처럼 <code>USING</code> 키워드를 사용하여 특정 테이블을 참조하여 유저테이블에서 블랙리스트 유저정보만 지울 수 있다.</p><p>그럼 여기서 SELF JOIN을 활용하여 MEM_PNUM, MEM_EMAIL 컬럼의 중복데이터를 삭제하고 싶으면 SQL문을 다음과 같은 식으로 작성할 수 있다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> MEMBER_TB T1</span><br><span class="line"><span class="keyword">USING</span> MEMBER_TB T2</span><br><span class="line"><span class="keyword">WHERE</span> T1.CTID <span class="operator">&lt;</span> T2.CTID</span><br><span class="line">  <span class="keyword">AND</span> T1.MEM_PNUM <span class="operator">=</span> T2.MEM_PNUM</span><br><span class="line">  <span class="keyword">AND</span> T1.MEM_EMAIL <span class="operator">=</span> T2.MEM_EMAIL;</span><br></pre></td></tr></table></figure><p>참고한 자료에선 1000만건의 데이터 중 10만건이 중복발생했을 때 약 42초정도 걸렸다고 했고 적용 전 확인해보기 위해 샘플로 Row가 약 800만에 중복데이터가 32만건 정도 들어있는 테이블로 테스트를 해보니 쿼리 실행에 약 1분정도 소요된 것을 확인하고 본래 타겟 테이블에 적용하였다.</p><p>그 후 데이터 생성 로직을 변경하여 중복데이터가 들어올 수 없도록 수정하였고 설계와 테스트를 더 잘 해야겠다는 생각이 절실하게 드는 하루였다.</p><p><em><strong>Reference</strong></em><br><a href="https://www.postgresqltutorial.com/postgresql-delete-join/">PostgreSQL DELETE JOIN</a></p><p><a href="https://rfriend.tistory.com/386">중복된 관측치 제거하기</a></p><p><a href="https://techmango.org/2018/10/08/how-to-delete-duplicate-rows-in-postgresql/">How to delete duplicate rows in postgresql?</a></p>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/sql/">sql</category>
      
      <category domain="https://yoo0926.github.io/categories/sql/postgresql/">postgresql</category>
      
      
      <category domain="https://yoo0926.github.io/tags/sql/">sql</category>
      
      <category domain="https://yoo0926.github.io/tags/postgresql/">postgresql</category>
      
      
      <comments>https://yoo0926.github.io/2020/11/23/sql/postgresql/%EC%A4%91%EB%B3%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%9C%EA%B1%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Framework란 무엇인가</title>
      <link>https://yoo0926.github.io/2020/11/03/spring/%EA%B0%9C%EC%9A%94/</link>
      <guid>https://yoo0926.github.io/2020/11/03/spring/%EA%B0%9C%EC%9A%94/</guid>
      <pubDate>Mon, 02 Nov 2020 15:38:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;기초가 부족한 관계로 기초부터 다시 정리도 하는 겸사겸사 첫주제는 spring framework로 정했다. &lt;/p&gt;
&lt;h1 id=&quot;Srping-Framework란&quot;&gt;&lt;a href=&quot;#Srping-Framework란&quot; class=&quot;headerlin</description>
        
      
      
      
      <content:encoded><![CDATA[<p>기초가 부족한 관계로 기초부터 다시 정리도 하는 겸사겸사 첫주제는 spring framework로 정했다. </p><h1 id="Srping-Framework란"><a href="#Srping-Framework란" class="headerlink" title="Srping Framework란"></a>Srping Framework란</h1><blockquote><p>스프링 프레임워크(Spring Framework)는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크로 간단히 스프링(Spring)이라고도 한다. 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공하고 있다.</p><p>대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자정부 표준프레임우커의 기반 기술로서 쓰이고 있다.</p></blockquote><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ol><li><h4 id="크기와-부하의-측면에서-경량-컨테이너로서-자바-객체를-직접관리한다"><a href="#크기와-부하의-측면에서-경량-컨테이너로서-자바-객체를-직접관리한다" class="headerlink" title="크기와 부하의 측면에서 경량 컨테이너로서 자바 객체를 직접관리한다."></a>크기와 부하의 측면에서 경량 컨테이너로서 자바 객체를 직접관리한다.</h4><ul><li>객체 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수 있다</li></ul></li><li><h4 id="제어-반전-혹은-제어-역행-IoC-Inversion-of-Control-을-지원한다"><a href="#제어-반전-혹은-제어-역행-IoC-Inversion-of-Control-을-지원한다" class="headerlink" title="제어 반전 혹은 제어 역행(IoC: Inversion of Control)을 지원한다."></a><strong>제어 반전</strong> 혹은 <strong>제어 역행</strong>(<code>IoC: Inversion of Control</code>)을 지원한다.</h4><ul><li>컨트롤의 제어권이 사용자가 아닌 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출한다.</li><li>IoC는 DI와 DL에 의해 구현된다.<ul><li><strong>DL(Dependency Lookup)</strong> : 의존성 검색<ul><li>컨테이너에서는 객체들을 관리하기 위해 별도의 저장소에 빈을 저장하는데 저장소에 저장되어 있는 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색하는 방법</li></ul></li><li><strong>DI(Dependency Injection)</strong> : 의존성 주입<ul><li>의존성 주입이란 객체가 서로 의존하는 관계가 되게 의존성을 주입하는 것으로 객체지향 프로그램에서 의존성이란 하나의 객체가 어떠한 다른 객체를 사용하는 것을 의미한다.</li><li>IoC에선 각 클래스 사이에 필요로 하는 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것을 말한다.</li></ul></li></ul></li></ul></li><li><h4 id="POJO-Plain-Old-Java-Object-방식의-프레임워크이다"><a href="#POJO-Plain-Old-Java-Object-방식의-프레임워크이다" class="headerlink" title="POJO(Plain Old Java Object) 방식의 프레임워크이다."></a><strong>POJO</strong>(<code>Plain Old Java Object</code>) 방식의 프레임워크이다.</h4><ul><li><p>직역하면 <code>오래된 방식의 간단한 자바 오프젝트</code>라는 말이다.</p></li><li><p>일반적인 J2EE 프레임워크에 비해 구현을 위하여 특정한 인터페이스를 구현하거나 상속을 받을 필요가 없어 기존에 존재하는 라이브러리 등을 지원하기에 용이하고 객체가 가볍다.</p></li><li><p>쉽게 이야기하면 getter/setter 메소드로 이루어진 <code>Java Benas</code>를 생각하면 된다.</p></li><li><p>예를 들어 자바 서블릿 코드를 작성할 때는 보통 <code>HttpServlet</code>을 상속받아야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TestServlet extends HttpServlet &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이처럼 서블릿 프로그래밍을 하는 것만으로 객체지향 프로그래밍의 가장 핵심적인 기능 중 하나인 상속을 할 수 없고 HttpServlet에서 제공하는 기능을 어떻게 재사용할 것인지 판단해야하는 부분도 생겼다.</p></li><li><p>POJO는 이러한 제약이 없는 일반적인 객체를 말하는데 여기서 상속이나 인터페이스 구현을 사용하지 않는 객체가 아니라 어떠한 라이브러리나 프레임워크 등 자바 언어 사양 외에 어떠한 제한을 강제받지 않는 자바 오브젝트를 뜻하는 것이다.</p></li></ul></li><li><h4 id="관점-지향-프로그래밍-AOP-Aspect-Oriented-Programming-을-지원한다"><a href="#관점-지향-프로그래밍-AOP-Aspect-Oriented-Programming-을-지원한다" class="headerlink" title="관점 지향 프로그래밍(AOP: Aspect Oriented Programming)을 지원한다."></a>관점 지향 프로그래밍(<code>AOP: Aspect Oriented Programming</code>)을 지원한다.</h4><ul><li>기존의 객체지향 프로그래밍(<code>OOP: Object Oriented Programming</code>) 에서는 객체의 재사용으로 인해 반복되는 코드의 양을 줄일 수 있었지만 여전히 많은 부분에서 중복된 코드가 발생한다.</li><li>예를 들어 로그, 권한 체크, 인증, 예외 처리와 같은 소스상에서 반복될 수 밖에 없는 필수적인 요소들로 코드의 가독성이나 유지보수적인 측면에서 좋지 않았다.</li><li>AOP는 OOP를 대체하는 개념이 아닌 <code>OOP를 좀 더 OOP처럼 사용하기 위하여 보완하는 개념</code>으로 공통적으로 반드시 필요하지만 중복해서 작성해야하는 핵심 이외의 코드들을 외부로 분리하여 관리한다.</li><li>이렇게 외부에서 관리하는 공통기능을 핵심 로직에 영향을 끼치지 않게 잘 끼워넣어 개발하면 무분별하게 중복되는 코드를 제거하면서 공통기능의 수정을 통해 모든 핵심 로직의 공통기능을 수정하여 효율적인 유지보수가 가능해지면서 재활용성이 극대화된다.</li><li>즉, 위에서 예를 들었던 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 분리하여 관리할 수 있다는 것이다.</li></ul></li><li><h4 id="MVC-Model2"><a href="#MVC-Model2" class="headerlink" title="MVC (Model2)"></a>MVC (Model2)</h4><ul><li>MVC는 <code>Model, View, Controller</code> 를 뜻하며 사용자 인터페이스와 비즈니스 로직을 분리하여 개발하는 것으로 웹 프로그래밍 개발에선 거의 표준처럼 사용되고 있으며 일반적으로 Model2를 지칭한다.<ul><li><code>Model</code>은 데이터를 처리하는 영역</li><li><code>View</code>는 렌더링되서 실제로 보이는 화면</li><li><code>Controller</code>는 사용자의 요청을 받고, 응답을 주는 로직을 담당</li></ul></li><li>이처럼 소스를 분리하여 각 소스의 목적을 명확히하면 모듈화를 통해 재사용성을 늘리고 유지보수를 쉽게 할 수 있으며 확정성도 좋은 장점이 있다.</li><li>간단한 흐름을 살펴보면 <code>요청 -&gt; 컨트롤러 -&gt; 모델 -&gt; 컨트롤러 -&gt; 뷰</code> 의 흐름이라고 생각하면 된다.<br>(MVC와 관련된 자세한 내용은 추후 기회가 된다면 별도로 포스트하겠다.)</li></ul></li></ol><p>이상으로 스프링 프레임워크의 특징에 대하여 대략적으로 정리를 해보았다.</p><hr><p><em><strong>Reference</strong></em><br><a href="https://ko.wikipedia.org/">위키백과</a><br><a href="https://m.blog.naver.com/weekamp/186678831">POJO(Plain Old Java Object) 란?</a><br><a href="https://velog.io/@emawlrdl/Spring-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC-60k5hr47w2">Spring 개념 정리</a></p><hr>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/spring/">spring</category>
      
      
      <category domain="https://yoo0926.github.io/tags/spring/">spring</category>
      
      
      <comments>https://yoo0926.github.io/2020/11/03/spring/%EA%B0%9C%EC%9A%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git-flow의 활용</title>
      <link>https://yoo0926.github.io/2020/11/02/git/git-flow/</link>
      <guid>https://yoo0926.github.io/2020/11/02/git/git-flow/</guid>
      <pubDate>Mon, 02 Nov 2020 14:40:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;회사에서 내부서버에 Gitlab을 활용하여 Git Server를 구축하여 형상관리를 하고 있는데 특별한 관리나 체계없이 브랜치 관리를 하다보니 히스토리 파악하기도 힘들기도 하고 형상관리를 제대로 하고 있다는 느낌이 들지 않아 효율적인 형상관리 시</description>
        
      
      
      
      <content:encoded><![CDATA[<p>회사에서 내부서버에 Gitlab을 활용하여 Git Server를 구축하여 형상관리를 하고 있는데 특별한 관리나 체계없이 브랜치 관리를 하다보니 히스토리 파악하기도 힘들기도 하고 형상관리를 제대로 하고 있다는 느낌이 들지 않아 효율적인 형상관리 시스템의 사용을 위하여 방법을 찾던 중 <a href="https://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html">우아한형제들 기술블로그의 “우린 Git-flow를 사용하고 있어요”</a> 라는 글을 보고 해당 전략을 도입하면서 각 브랜치에 대해 간략하게 정리를 해보았다.</p><p><img src="/img/programming/git/git-flow.png" alt="Git-flow"></p><p>Git-flow에는 5가지 종류의 브랜치가 존재한다. 항상 유지되는 메인 브랜치들(<code>master</code>, <code>develop</code>)과 일정 기간 동안만 유지되는 보조 브랜치들(<code>feature</code>, <code>release</code>, <code>hotfix</code>)이 있다.</p><ul><li><code>master</code> : 제품으로 출시될 수 있는 브랜치</li><li><code>develop</code> : 다음 출시 버전을 개발하는 브랜치</li><li><code>feature</code> : 기능을 개발하는 브랜치</li><li><code>release</code> : 이번 출시 버전을 준비하는 브랜치</li><li><code>hotfix</code> : 출시 버전에서 발생한 버그를 수정 하는 브랜치</li></ul><p>가장 중심이 되는 브랜치는 <code>master</code>랑 <code>develop</code> 브랜치이며, 이 두 개 브랜치는 무조건 있어야 한다. 이름은 바뀔 수 있다만 웬만해서는 변경하지 않고 진행하도록 하자. Git도 Production에서 사용하는 브랜치는 <code>master</code>를 사용하게 되니 관련된 부분을 변경하면 새로운 사람이 왔을때 스터디 커브가 존재할 수 있다.</p><p>병합된 <code>feature</code>, <code>release</code>, <code>hotfix</code> 브랜치는 삭제하도록 한다. (클라이언트 툴에서 git flow제공한다면 merge 하면 삭제하는 옵션을 제공한다.)</p><h3 id="Feature-브랜치"><a href="#Feature-브랜치" class="headerlink" title="Feature 브랜치"></a><strong>Feature 브랜치</strong></h3><ul><li>브랜치 나오는 곳 : <code>develop</code></li><li>브랜치가 들어가는 곳 : <code>develop</code></li><li>이름 지정 : <code>master</code>, <code>develop</code>, <code>release-*</code>, <code>hotfix-*</code>를 제외한 어떤 것이든 가능.</li></ul><p>새로운 기능을 추가하는 브랜치이다.<code>feature</code>브랜치는 <code>origin</code>에는 반영하지 않고, 개발자의 reop애만 존재하도록 한다.</p><p>여기서 머지를 할 때, <code>--no-ff</code> 옵션을 이용하여 브랜치에서 머지가 되었음을 git 기록에 남겨두도록 한다.</p><h3 id="Release-브랜치"><a href="#Release-브랜치" class="headerlink" title="Release 브랜치"></a><strong>Release 브랜치</strong></h3><ul><li>브랜치 나오는 곳 : <code>develop</code></li><li>브랜치가 들어가는 곳 : <code>develop</code>, <code>master</code></li><li>이름 지정 : <code>release-*</code></li></ul><p>새로운 Production 릴리즈를 위한 브랜치이다.지금까지 한 기능을 묶어 <code>develop</code> 브랜치에서 <code>release</code> 브랜치를 따내고, <code>develop</code> 브랜치에서는 다음번 릴리즈에서 사용할 기능을 추가한다.<code>release</code> 브랜치에서는 버그 픽스에 대한 부분만 커밋하고, <strong>릴리즈가 준비되었다고 생각하면</strong> <code>master</code>로 머지를 진행한다. (이때도 <code>--no-ff</code> 옵션을 이용하여 머지하였음을 남긴다.)<code>master</code>로 머지 후 <code>tag</code> 명령을 이용하여 릴리즈 버전에 대해 명시를 하고, <code>-s</code> 나 <code>-u &lt;key&gt;</code> 옵션을 이용하여 머지한 사람의 정보를 남겨두도록 한다. 그런 뒤 <code>develop</code> 브랜치로 머지하여, <code>release</code> 브랜치에서 수정된 내용이 <code>develop</code> 브랜치에 반영한다.</p><h3 id="Hotfix-브랜치"><a href="#Hotfix-브랜치" class="headerlink" title="Hotfix 브랜치"></a><strong>Hotfix 브랜치</strong></h3><ul><li>브랜치 나오는 곳 : <code>master</code></li><li>브랜치가 들어가는 곳 : <code>develop</code>, <code>master</code></li><li>이름 지정 : <code>hotfix-*</code></li></ul><p>Production에서 발생한 버그들은 전부 여기로… 수정 끝나면, <code>develop</code>, <code>master</code> 브랜치에 반영하고, <code>master</code>에 다가는 <code>tag</code> 를 추가해준다.만약 <code>release</code> 브랜치가 존재한다면, <code>release</code> 브랜치에 <code>hotfix</code> 브랜치를 머지하여 릴리즈 될 때 반영이 될 수 있도록 한다.</p><hr><p><em><strong>Reference</strong></em><br><a href="https://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html">우아한형제들 기술블로그의 “우린 Git-flow를 사용하고 있어요”</a></p><hr>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/git/">git</category>
      
      
      <category domain="https://yoo0926.github.io/tags/git/">git</category>
      
      
      <comments>https://yoo0926.github.io/2020/11/02/git/git-flow/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Github Page와 Hexo를 활용하여 블로그 개설하기</title>
      <link>https://yoo0926.github.io/2020/11/01/blog/start-blog/</link>
      <guid>https://yoo0926.github.io/2020/11/01/blog/start-blog/</guid>
      <pubDate>Sun, 01 Nov 2020 06:34:25 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;블로그를-시작하며&quot;&gt;&lt;a href=&quot;#블로그를-시작하며&quot; class=&quot;headerlink&quot; title=&quot;블로그를 시작하며&quot;&gt;&lt;/a&gt;블로그를 시작하며&lt;/h1&gt;&lt;p&gt;그동안 OneNote, Notion 등 노트프로그램을 사용하여 단편적으로 공</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="블로그를-시작하며"><a href="#블로그를-시작하며" class="headerlink" title="블로그를 시작하며"></a>블로그를 시작하며</h1><p>그동안 OneNote, Notion 등 노트프로그램을 사용하여 단편적으로 공부하던 내용을 블로그를 통해 좀 더 체계적으로 정리하고 다른사람들과 공유하고 싶은 생각에 블로그를 시작하기로 했다.<del>(끈기가 부족한 편이라 얼마나 갈진 모르겠다^^;;)</del></p><p><img src="/img/blog/github-hexo.png" alt="Github + Hexo"></p><p>일반적인 블로그를 생각하면 네이버 블로그, 티스토리, 혹은 미디엄, 브런치 등을 떠올릴 수 있지만 기술블로그를 표방하는만큼 github page를 이용하기로 마음먹었다. github page에서는 <code>username.github.io</code> 도메인을 무료로 제공하여 정적 웹페이지를 무료 호스팅해주고 있다.</p><p><code>github page</code>에서 사용할 정적 웹페이지 생성기는 생각보다 다양한 종류가 있지만 마크다운 문서를 지원하면서 국내에서 가장 많이 사용되는 두가지는 다음과 같다.</p><ol><li>Jekyll<ol><li><code>Ruby</code> 기반</li><li>다양한 테마, 플러그인 지원</li><li>환경설정 및 커스터마이징이 다소 복잡하며(특히 윈도우에서) 글이 많아지면 빌드속도가 느려진다는 이야기가 있다.</li></ol></li><li>Hexo<ol><li><code>Javascript(Node.js)</code> 기반</li><li>마찬가지로 다양한 테마, 플러그인 지원</li><li>npm을 통해 쉽게 설치 가능하며 Github 배포과정도 편하다.</li></ol></li></ol><p>처음엔 <code>Jekyll</code>을 사용하여 초기설정을 해봤는데 윈도우에서 설정이 너무 복잡하고 오류도 많이나서 익숙한 <code>Node.js</code>기반의 <code>Hexo</code>로 시작하기로 했다.</p><h2 id="1-설치"><a href="#1-설치" class="headerlink" title="1. 설치"></a>1. 설치</h2><h3 id="1-1-사전준비"><a href="#1-1-사전준비" class="headerlink" title="1.1 사전준비"></a>1.1 사전준비</h3><ul><li>Node.js 설치</li><li>Git 설치</li><li>Github 가입 후 <strong>신규 Repository 2개 생성</strong></li></ul><p>각 프로그램 설치는 이미 많은 문서들이 있기 때문에  별도로 언급하진 않겠다. Repository를 2개 생성하는 이유는 각각 블로그 운영, hexo 설정을 저장할 목적이며 블로그로 운영할 Repository name은 USERNAME.github.io 의 Public으로 생성한다.</p><h2 id="2-Hexo-설치-및-블로그-생성"><a href="#2-Hexo-설치-및-블로그-생성" class="headerlink" title="2. Hexo 설치 및 블로그 생성"></a>2. Hexo 설치 및 블로그 생성</h2><p>Hexo설정을 저장할 github repository를 clone 한 후 해당 위치에서 작업한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init $디렉토리명</span><br><span class="line"><span class="built_in">cd</span> $디렉토리명</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="2-1-설정파일-수정"><a href="#2-1-설정파일-수정" class="headerlink" title="2.1 설정파일 수정"></a>2.1 설정파일 수정</h3><p>블로그 생성이 정상적으로 완료되었으면 이제 설정파일을 수정해보자.</p><p>root 경로에 <code>_config.yml</code>파일을 확인할 수 있는데 기본적인 블로그 설정은 이곳에서 관리한다.  자세한 내용은 공식문서에서 확인할 수 있다.</p><ul><li>Hexo Docs : <a href="https://hexo.io/docs/">https://hexo.io/docs/</a></li></ul><h4 id="Site-설정"><a href="#Site-설정" class="headerlink" title="Site 설정"></a>Site 설정</h4><p>블로그 이름 및 간략한 소개를 설정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">subtitle: No pain, No gain</span><br><span class="line">description:</span><br><span class="line">author: Jaeyong Yoo</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="URL-설정"><a href="#URL-설정" class="headerlink" title="URL 설정"></a>URL 설정</h4><p>블로그 URL 정보를 설정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https:&#x2F;&#x2F;USERNAME.github.io</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h4 id="Github-설정"><a href="#Github-설정" class="headerlink" title="Github 설정"></a>Github 설정</h4><p>배포할 Github Page의 Repository 정보를 입력한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;yoo0926&#x2F;yoo0926.github.io</span><br></pre></td></tr></table></figure><p>정상적으로 설치와 설정이 끝났다면 아래 명령어로 서버를 실행시켜 웹브라우저에서 <a href="http://localhost:4000/">http://localhost:4000</a> 으로 접속하여 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#or hexo s</span></span><br></pre></td></tr></table></figure><ul><li>만약 로컬에서 실행 시 permission denied 가 발생하는 경우가 있다면 그냥 port를 변경해서 테스트하자</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 8088</span><br></pre></td></tr></table></figure><h2 id="3-Github에-배포하기"><a href="#3-Github에-배포하기" class="headerlink" title="3. Github에 배포하기"></a>3. Github에 배포하기</h2><p>로컬에서 테스트가 완료되었다면 이제 앞서 언급한 Github Page의 정적 웹페이즈 호스팅을 사용해보자.</p><h4 id="Hexo-Generate-and-Deploy"><a href="#Hexo-Generate-and-Deploy" class="headerlink" title="Hexo Generate and Deploy"></a>Hexo Generate and Deploy</h4><p>github에 배포하기 위해선 <code>hexo-deployer-git</code> 이라는 플러그인을 설치해야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>플러그인 설치가 완료되면 배포할 리소스를 생성하여 앞서 <code>_config.yml</code> 파일에서 설정한 배포설정의 저장소로 배포하게 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment">#hexo g</span></span><br><span class="line">hexo deploy <span class="comment">#hexo d</span></span><br><span class="line"><span class="comment">#동시에 하고 싶으면</span></span><br><span class="line">hexo deploy --generate <span class="comment">#hexo d -g</span></span><br></pre></td></tr></table></figure><p>생성된 리소스는 USERNAME.github.io 저장소에 배포되며 <a href="https://username.github.io로/">https://USERNAME.github.io로</a> 접속하게되면 블로그를 확인할 수 있다.</p><h5 id="주의"><a href="#주의" class="headerlink" title="주의"></a>주의</h5><p>간혹 deploy가 정상적으로 되지 않는다면 아래 명령어로 clean 후 다시 배포를 해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>이상으로 기본적인 블로그 생성과 관련된 내용을 마무리 한다.</p><hr><ul><li>추가메모</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new 포스트명 //기본설정값 draft 로 바꿔놓음</span><br><span class="line">hexo publish 포스트명 //draft -&gt; posts 로 이동</span><br></pre></td></tr></table></figure><hr><p><em><strong>Reference</strong></em><br><a href="https://theserverside.tistory.com/282">Hexo로 github 블로그 만들기 (Hueman 테마)</a><br><a href="https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/">Github Page와 Hexo를 통해 30분만에 기술 블로그 만들기</a><br><a href="https://hexo.io/docs/">Hexo 공식문서</a></p><hr>]]></content:encoded>
      
      
      <category domain="https://yoo0926.github.io/categories/blog/">blog</category>
      
      
      <category domain="https://yoo0926.github.io/tags/blog/">blog</category>
      
      <category domain="https://yoo0926.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://yoo0926.github.io/2020/11/01/blog/start-blog/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
